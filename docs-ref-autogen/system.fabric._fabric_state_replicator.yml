### YamlMime:ManagedReference
items:
- uid: system.fabric._fabric_state_replicator
  id: _fabric_state_replicator
  parent: system.fabric
  children:
  - system.fabric._fabric_state_replicator.FabricStateReplicator(long,long,long)
  - system.fabric._fabric_state_replicator.getStateReplicator()
  - system.fabric._fabric_state_replicator.getStateReplicator2()
  href: system.fabric._fabric_state_replicator.yml
  langs:
  - java
  name: FabricStateReplicator
  nameWithType: FabricStateReplicator
  fullName: system.fabric.FabricStateReplicator
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/FabricStateReplicator.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricStateReplicator.java
    startLine: 2
  package: system.fabric
  syntax:
    content: public class FabricStateReplicator extends FabricReplicator
  inheritance:
  - java.lang.Object
  - system.fabric._primary_replicator
  - system.fabric._replicator
  - system.fabric._fabric_replicator
  inheritedMembers:
  - system.fabric._fabric_replicator.abort()
  - system.fabric._fabric_replicator.buildReplicaAsync(ReplicaInformation,CancellationToken)
  - system.fabric._fabric_replicator.changeRoleAsync(Epoch,ReplicaRole,CancellationToken)
  - system.fabric._fabric_replicator.closeAsync(CancellationToken)
  - system.fabric._fabric_replicator.FabricReplicator(long)
  - system.fabric._fabric_replicator.getCatchUpCapability()
  - system.fabric._fabric_replicator.getCurrentProgress()
  - system.fabric._fabric_replicator.onDataLossAsync(CancellationToken)
  - system.fabric._fabric_replicator.openAsync(CancellationToken)
  - system.fabric._fabric_replicator.removeReplica(long)
  - system.fabric._fabric_replicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration,ReplicaSetConfiguration)
  - system.fabric._fabric_replicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  - system.fabric._fabric_replicator.updateEpochAsync(Epoch,CancellationToken)
  - system.fabric._fabric_replicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode,CancellationToken)
- uid: system.fabric._fabric_state_replicator.FabricStateReplicator(long,long,long)
  id: FabricStateReplicator(long,long,long)
  parent: system.fabric._fabric_state_replicator
  href: system.fabric._fabric_state_replicator.yml
  langs:
  - java
  name: FabricStateReplicator(long fabricreplicator, long stateReplicator, long operationDataFactory)
  nameWithType: FabricStateReplicator.FabricStateReplicator(long fabricreplicator, long stateReplicator, long operationDataFactory)
  fullName: system.fabric.FabricStateReplicator.FabricStateReplicator(long fabricreplicator, long stateReplicator, long operationDataFactory)
  overload: system.fabric._fabric_state_replicator.FabricStateReplicator*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricStateReplicator.java
    startLine: 6
  package: system.fabric
  syntax:
    content: public FabricStateReplicator(long fabricreplicator, long stateReplicator, long operationDataFactory)
    parameters:
    - id: fabricreplicator
      type: 0364520f
    - id: stateReplicator
      type: 0364520f
    - id: operationDataFactory
      type: 0364520f
- uid: system.fabric._fabric_state_replicator.getStateReplicator()
  id: getStateReplicator()
  parent: system.fabric._fabric_state_replicator
  href: system.fabric._fabric_state_replicator.yml
  langs:
  - java
  name: getStateReplicator()
  nameWithType: FabricStateReplicator.getStateReplicator()
  fullName: StateReplicator system.fabric.FabricStateReplicator.getStateReplicator()
  overload: system.fabric._fabric_state_replicator.getStateReplicator*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricStateReplicator.java
    startLine: 17
  package: system.fabric
  summary: >-
    <p>Represents the <xref uid="system.fabric._state_replicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref>.</p>

    <p></p>
  syntax:
    content: public StateReplicator getStateReplicator()
    return:
      type: system.fabric._state_replicator
      description: <p>the <xref uid="system.fabric._state_replicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref>. </p>
- uid: system.fabric._fabric_state_replicator.getStateReplicator2()
  id: getStateReplicator2()
  parent: system.fabric._fabric_state_replicator
  href: system.fabric._fabric_state_replicator.yml
  langs:
  - java
  name: getStateReplicator2()
  nameWithType: FabricStateReplicator.getStateReplicator2()
  fullName: StateReplicator2 system.fabric.FabricStateReplicator.getStateReplicator2()
  overload: system.fabric._fabric_state_replicator.getStateReplicator2*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricStateReplicator.java
    startLine: 21
  package: system.fabric
  syntax:
    content: public StateReplicator2 getStateReplicator2()
    return:
      type: system.fabric._state_replicator2
references:
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: system.fabric._fabric_state_replicator.FabricStateReplicator*
  name: FabricStateReplicator
  nameWithType: FabricStateReplicator.FabricStateReplicator
  fullName: system.fabric.FabricStateReplicator.FabricStateReplicator
  package: system.fabric
- uid: system.fabric._fabric_state_replicator.getStateReplicator*
  name: getStateReplicator
  nameWithType: FabricStateReplicator.getStateReplicator
  fullName: StateReplicator system.fabric.FabricStateReplicator.getStateReplicator
  package: system.fabric
- uid: system.fabric._fabric_state_replicator.getStateReplicator2*
  name: getStateReplicator2
  nameWithType: FabricStateReplicator.getStateReplicator2
  fullName: StateReplicator2 system.fabric.FabricStateReplicator.getStateReplicator2
  package: system.fabric
- uid: system.fabric._fabric_replicator.abort()
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: abort()
  nameWithType: FabricReplicator.abort()
  fullName: void system.fabric.FabricReplicator.abort()
  type: Method
  syntax:
    content: public void abort()
- uid: system.fabric._fabric_replicator.buildReplicaAsync(ReplicaInformation,CancellationToken)
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  nameWithType: FabricReplicator.buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  fullName: CompletableFuture system.fabric.FabricReplicator.buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>
  syntax:
    content: public CompletableFuture buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
    parameters:
    - id: replicaInfo
      type: system.fabric._replica_information
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 5f2aaa64
      description: <p>A task that represents the asynchronous operation. </p>
- uid: system.fabric._fabric_replicator.changeRoleAsync(Epoch,ReplicaRole,CancellationToken)
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  nameWithType: FabricReplicator.changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  fullName: CompletableFuture system.fabric.FabricReplicator.changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  type: Method
  syntax:
    content: public CompletableFuture changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
    parameters:
    - id: epoch
      type: system.fabric._epoch
    - id: role
      type: system.fabric._replica_role
    - id: cancellationToken
      type: system.fabric._cancellation_token
    return:
      type: 5f2aaa64
- uid: system.fabric._fabric_replicator.closeAsync(CancellationToken)
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: FabricReplicator.closeAsync(CancellationToken cancellationToken)
  fullName: CompletableFuture system.fabric.FabricReplicator.closeAsync(CancellationToken cancellationToken)
  type: Method
  syntax:
    content: public CompletableFuture closeAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
    return:
      type: 5f2aaa64
- uid: system.fabric._fabric_replicator.FabricReplicator(long)
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: FabricReplicator(long replicator)
  nameWithType: FabricReplicator.FabricReplicator(long replicator)
  fullName: system.fabric.FabricReplicator.FabricReplicator(long replicator)
  type: Constructor
  summary: <p>Creates instance of <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>. </p>
  syntax:
    content: public FabricReplicator(long replicator)
    parameters:
    - id: replicator
      type: 0364520f
      description: <p>pointer to native replicator. </p>
- uid: system.fabric._fabric_replicator.getCatchUpCapability()
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: getCatchUpCapability()
  nameWithType: FabricReplicator.getCatchUpCapability()
  fullName: long system.fabric.FabricReplicator.getCatchUpCapability()
  type: Method
  syntax:
    content: public long getCatchUpCapability()
    return:
      type: 0364520f
- uid: system.fabric._fabric_replicator.getCurrentProgress()
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: getCurrentProgress()
  nameWithType: FabricReplicator.getCurrentProgress()
  fullName: long system.fabric.FabricReplicator.getCurrentProgress()
  type: Method
  syntax:
    content: public long getCurrentProgress()
    return:
      type: 0364520f
- uid: system.fabric._fabric_replicator.onDataLossAsync(CancellationToken)
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: onDataLossAsync(CancellationToken cancellationToken)
  nameWithType: FabricReplicator.onDataLossAsync(CancellationToken cancellationToken)
  fullName: CompletableFuture<Boolean> system.fabric.FabricReplicator.onDataLossAsync(CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 7e53ac82
      description: <p>A CompletableFuture that represents the asynchronous operation. </p>
- uid: system.fabric._fabric_replicator.openAsync(CancellationToken)
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: openAsync(CancellationToken cancellationToken)
  nameWithType: FabricReplicator.openAsync(CancellationToken cancellationToken)
  fullName: CompletableFuture<String> system.fabric.FabricReplicator.openAsync(CancellationToken cancellationToken)
  type: Method
  syntax:
    content: public CompletableFuture<String> openAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
    return:
      type: 06be942d
- uid: system.fabric._fabric_replicator.removeReplica(long)
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: removeReplica(long replicaId)
  nameWithType: FabricReplicator.removeReplica(long replicaId)
  fullName: void system.fabric.FabricReplicator.removeReplica(long replicaId)
  type: Method
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>

    <p>

      <b>Remarks:</b> This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax:
    content: public void removeReplica(long replicaId)
    parameters:
    - id: replicaId
      type: 0364520f
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>
- uid: system.fabric._fabric_replicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration,ReplicaSetConfiguration)
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  nameWithType: FabricReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  fullName: void system.fabric.FabricReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  type: Method
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>
  syntax:
    content: public void updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
    parameters:
    - id: currentConfiguration
      type: system.fabric._replica_set_configuration
      description: <p>For Internal Use Only. </p>
    - id: previousConfiguration
      type: system.fabric._replica_set_configuration
      description: <p>For Internal Use Only. </p>
- uid: system.fabric._fabric_replicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  nameWithType: FabricReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  fullName: void system.fabric.FabricReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  type: Method
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>

    <p>

      <b>Remarks:</b> This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax:
    content: public void updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
    parameters:
    - id: currentConfiguration
      type: system.fabric._replica_set_configuration
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>
- uid: system.fabric._fabric_replicator.updateEpochAsync(Epoch,CancellationToken)
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  nameWithType: FabricReplicator.updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  fullName: CompletableFuture system.fabric.FabricReplicator.updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  type: Method
  syntax:
    content: public CompletableFuture updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
    parameters:
    - id: epoch
      type: system.fabric._epoch
    - id: cancellationToken
      type: system.fabric._cancellation_token
    return:
      type: 5f2aaa64
- uid: system.fabric._fabric_replicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode,CancellationToken)
  parent: system.fabric._fabric_replicator
  href: system.fabric._fabric_replicator.yml
  name: waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  nameWithType: FabricReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  fullName: CompletableFuture system.fabric.FabricReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>
  syntax:
    content: public CompletableFuture waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
    parameters:
    - id: quorumMode
      type: system.fabric._replica_set_quorum_mode
      description: <p>For Internal Use Only. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 5f2aaa64
      description: <p>For Internal Use Only. </p>
- uid: system.fabric._fabric_replicator
  parent: system.fabric
  href: system.fabric._fabric_replicator.yml
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: system.fabric.FabricReplicator
  type: Class
  summary: >-
    <p>Replicates state for high availability and reliability. </p>

    <p>

      <b>Remarks:</b>Provides the default implementation of the <xref uid="system.fabric._state_replicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref>, <xref uid="system.fabric._replicator" data-throw-if-not-resolved="false">system.fabric.Replicator</xref>, and <xref uid="system.fabric._primary_replicator" data-throw-if-not-resolved="false">system.fabric.PrimaryReplicator</xref> interfaces, which user services can use, along with their implementation of the <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref> interface. An instance of the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> class is obtained via the <xref uid="system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition#createReplicator( system.fabric.StateProvider, system.fabric.ReplicatorSettings)</xref> method, which can be cast to <xref uid="system.fabric._state_replicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref> for use. </p>
  syntax:
    content: public class FabricReplicator implements Replicator
- uid: system.fabric._state_replicator
  parent: system.fabric
  href: system.fabric._state_replicator.yml
  name: StateReplicator
  nameWithType: StateReplicator
  fullName: system.fabric.StateReplicator
  type: Interface
  summary: <p>Exposes replication related functions of the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref> class that are used by <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">StateProvider</xref> to replicate state to ensure high availability. </p>
  syntax:
    content: public interface StateReplicator
- uid: system.fabric._state_replicator2
  parent: system.fabric
  href: system.fabric._state_replicator2.yml
  name: StateReplicator2
  nameWithType: StateReplicator2
  fullName: system.fabric.StateReplicator2
  type: Interface
  summary: <p>Exposes replication-related functions of the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> class that are used by <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref> to replicate state to ensure high availability. </p>
  syntax:
    content: public interface StateReplicator2

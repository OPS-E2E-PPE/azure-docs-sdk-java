### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  id: _spell_check_a_p_i_impl
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  children:
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.acceptLanguage()
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.generateClientRequestId()
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.getAzureClient()
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.initialize()
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.longRunningOperationRetryTimeout()
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.SpellCheckAPIImpl(RestClient)
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.SpellCheckAPIImpl(ServiceClientCredentials)
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.SpellCheckAPIImpl(String,ServiceClientCredentials)
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellChecker()
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellChecker(String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String,String)
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerAsync()
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerAsync(final ServiceCallback<SpellCheckInner>)
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerAsync(String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String,String)
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerAsync(String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String,String,final ServiceCallback<SpellCheckInner>)
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerWithServiceResponseAsync()
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerWithServiceResponseAsync(String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String,String)
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.userAgent()
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.withAcceptLanguage(String)
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.withGenerateClientRequestId(boolean)
  - com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.withLongRunningOperationRetryTimeout(int)
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: SpellCheckAPIImpl
  nameWithType: SpellCheckAPIImpl
  fullName: com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl
  type: Class
  source:
    remote: &o0
      path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 33
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: <p>Initializes a new instance of the <xref uid="com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl" data-throw-if-not-resolved="false">SpellCheckAPIImpl</xref> class. </p>
  syntax: &o1
    content: public class SpellCheckAPIImpl
  inheritance:
  - java.lang.Object
  - AzureServiceClient
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.acceptLanguage()
  id: acceptLanguage()
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: acceptLanguage()
  nameWithType: SpellCheckAPIImpl.acceptLanguage()
  fullName: String com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.acceptLanguage()
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.acceptLanguage*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 55
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>Gets Gets or sets the preferred language for the response.</p>

    <p></p>
  syntax:
    content: public String acceptLanguage()
    return:
      type: "26831127"
      description: <p>the acceptLanguage value. </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.generateClientRequestId()
  id: generateClientRequestId()
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: generateClientRequestId()
  nameWithType: SpellCheckAPIImpl.generateClientRequestId()
  fullName: boolean com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.generateClientRequestId()
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.generateClientRequestId*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 101
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>Gets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.</p>

    <p></p>
  syntax:
    content: public boolean generateClientRequestId()
    return:
      type: 4fc6e284
      description: <p>the generateClientRequestId value. </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.getAzureClient()
  id: getAzureClient()
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: getAzureClient()
  nameWithType: SpellCheckAPIImpl.getAzureClient()
  fullName: AzureClient com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.getAzureClient()
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.getAzureClient*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 43
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: <p>Gets the <xref uid="" data-throw-if-not-resolved="false">AzureClient</xref> used for long running operations. </p>
  syntax:
    content: public AzureClient getAzureClient()
    return:
      type: c1c26e8d
      description: <p>the azure client; </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.initialize()
  id: initialize()
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: initialize()
  nameWithType: SpellCheckAPIImpl.initialize()
  fullName: void com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.initialize()
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.initialize*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 146
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  syntax:
    content: protected void initialize()
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.longRunningOperationRetryTimeout()
  id: longRunningOperationRetryTimeout()
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: longRunningOperationRetryTimeout()
  nameWithType: SpellCheckAPIImpl.longRunningOperationRetryTimeout()
  fullName: int com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.longRunningOperationRetryTimeout()
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.longRunningOperationRetryTimeout*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 78
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>Gets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.</p>

    <p></p>
  syntax:
    content: public int longRunningOperationRetryTimeout()
    return:
      type: f75371fa
      description: <p>the longRunningOperationRetryTimeout value. </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.SpellCheckAPIImpl(RestClient)
  id: SpellCheckAPIImpl(RestClient)
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: SpellCheckAPIImpl(RestClient restClient)
  nameWithType: SpellCheckAPIImpl.SpellCheckAPIImpl(RestClient restClient)
  fullName: com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.SpellCheckAPIImpl(RestClient restClient)
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.SpellCheckAPIImpl*
  type: Constructor
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 141
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>Initializes an instance of SpellCheckAPI client.</p>

    <p></p>
  syntax:
    content: public SpellCheckAPIImpl(RestClient restClient)
    parameters:
    - id: restClient
      type: 9545a295
      description: <p>the REST client to connect to Azure. </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.SpellCheckAPIImpl(ServiceClientCredentials)
  id: SpellCheckAPIImpl(ServiceClientCredentials)
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: SpellCheckAPIImpl(ServiceClientCredentials credentials)
  nameWithType: SpellCheckAPIImpl.SpellCheckAPIImpl(ServiceClientCredentials credentials)
  fullName: com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.SpellCheckAPIImpl(ServiceClientCredentials credentials)
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.SpellCheckAPIImpl*
  type: Constructor
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 121
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>Initializes an instance of SpellCheckAPI client.</p>

    <p></p>
  syntax:
    content: public SpellCheckAPIImpl(ServiceClientCredentials credentials)
    parameters:
    - id: credentials
      type: d7990412
      description: <p>the management credentials for Azure </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.SpellCheckAPIImpl(String,ServiceClientCredentials)
  id: SpellCheckAPIImpl(String,ServiceClientCredentials)
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: SpellCheckAPIImpl(String baseUrl, ServiceClientCredentials credentials)
  nameWithType: SpellCheckAPIImpl.SpellCheckAPIImpl(String baseUrl, ServiceClientCredentials credentials)
  fullName: com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.SpellCheckAPIImpl(String baseUrl, ServiceClientCredentials credentials)
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.SpellCheckAPIImpl*
  type: Constructor
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 131
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>Initializes an instance of SpellCheckAPI client.</p>

    <p></p>
  syntax:
    content: public SpellCheckAPIImpl(String baseUrl, ServiceClientCredentials credentials)
    parameters:
    - id: baseUrl
      type: "26831127"
      description: <p>the base URL of the host </p>
    - id: credentials
      type: d7990412
      description: <p>the management credentials for Azure </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellChecker()
  id: spellChecker()
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: spellChecker()
  nameWithType: SpellCheckAPIImpl.spellChecker()
  fullName: SpellCheckInner com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.spellChecker()
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellChecker*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 187
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public SpellCheckInner spellChecker()
    return:
      type: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner
      description: <p>the <xref uid="com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner" data-throw-if-not-resolved="false">SpellCheckInner</xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: com.microsoft.azure.cognitiveservices.spellcheck._error_response_exception
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellChecker(String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String,String)
  id: spellChecker(String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String,String)
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: spellChecker(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text)
  nameWithType: SpellCheckAPIImpl.spellChecker(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text)
  fullName: SpellCheckInner com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.spellChecker(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text)
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellChecker*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 283
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public SpellCheckInner spellChecker(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text)
    parameters:
    - id: acceptLanguage
      type: "26831127"
      description: <p>A comma-delimited list of one or more languages to use for user interface strings. The list is in decreasing order of preference. For additional information, including expected format, see [RFC2616](<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html</a>). This header and the setLang query parameter are mutually exclusive; do not specify both. If you set this header, you must also specify the cc query parameter. Bing will use the first supported language it finds from the list, and combine that language with the cc parameter value to determine the market to return results for. If the list does not include a supported language, Bing will find the closest language and market that supports the request, and may use an aggregated or default market for the results instead of a specified one. You should use this header and the cc query parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang query parameters. A user interface string is a string that's used as a label in a user interface. There are very few user interface strings in the JSON response objects. Any links in the response objects to Bing.com properties will apply the specified language. </p>
    - id: pragma
      type: "26831127"
      description: '<p>By default, Bing returns cached content, if available. To prevent Bing from returning cached content, set the Pragma header to no-cache (for example, Pragma: no-cache). </p>'
    - id: clientId
      type: "26831127"
      description: "<p>Bing uses this header to provide users with consistent behavior across Bing API calls. Bing often flights new features and improvements, and it uses the client ID as a key for assigning traffic on different flights. If you do not use the same client ID for a user across multiple requests, then Bing may assign the user to multiple conflicting flights. Being assigned to multiple conflicting flights can lead to an inconsistent user experience. For example, if the second request has a different flight assignment than the first, the experience may be unexpected. Also, Bing can use the client ID to tailor web results to that client ID’s search history, providing a richer experience for the user. Bing also uses this header to help improve result rankings by analyzing the activity generated by a client ID. The relevance improvements help with better quality of results delivered by Bing APIs and in turn enables higher click-through rates for the API consumer. IMPORTANT: Although optional, you should consider this header required. Persisting the client ID across multiple requests for the same end user and device combination enables 1) the API consumer to receive a consistent user experience, and 2) higher click-through rates via better quality of results from the Bing APIs. Each user that uses your application on the device must have a unique, Bing generated client ID. If you do not include this header in the request, Bing generates an ID and returns it in the X-MSEdge-ClientID response header. The only time that you should NOT include this header in a request is the first time the user uses your app on that device. Use the client ID for each Bing API request that your app makes for this user on the device. Persist the client ID. To persist the ID in a browser app, use a persistent HTTP cookie to ensure the ID is used across all sessions. Do not use a session cookie. For other apps such as mobile apps, use the device's persistent storage to persist the ID. The next time the user uses your app on that device, get the client ID that you persisted. Bing responses may or may not include this header. If the response includes this header, capture the client ID and use it for all subsequent Bing requests for the user on that device. If you include the X-MSEdge-ClientID, you must not include cookies in the request. </p>"
    - id: clientIp
      type: "26831127"
      description: <p>The IPv4 or IPv6 address of the client device. The IP address is used to discover the user's location. Bing uses the location information to determine safe search behavior. Although optional, you are encouraged to always specify this header and the X-Search-Location header. Do not obfuscate the address (for example, by changing the last octet to 0). Obfuscating the address results in the location not being anywhere near the device's actual location, which may result in Bing serving erroneous results. </p>
    - id: location
      type: "26831127"
      description: "<p>A semicolon-delimited list of key/value pairs that describe the client's geographical location. Bing uses the location information to determine safe search behavior and to return relevant local content. Specify the key/value pair as &lt;key&gt;:&lt;value&gt;. The following are the keys that you use to specify the user's location. lat (required): The latitude of the client's location, in degrees. The latitude must be greater than or equal to -90.0 and less than or equal to +90.0. Negative values indicate southern latitudes and positive values indicate northern latitudes. long (required): The longitude of the client's location, in degrees. The longitude must be greater than or equal to -180.0 and less than or equal to +180.0. Negative values indicate western longitudes and positive values indicate eastern longitudes. re (required): The radius, in meters, which specifies the horizontal accuracy of the coordinates. Pass the value returned by the device's location service. Typical values might be 22m for GPS/Wi-Fi, 380m for cell tower triangulation, and 18,000m for reverse IP lookup. ts (optional): The UTC UNIX timestamp of when the client was at the location. (The UNIX timestamp is the number of seconds since January 1, 1970.) head (optional): The client's relative heading or direction of travel. Specify the direction of travel as degrees from 0 through 360, counting clockwise relative to true north. Specify this key only if the sp key is nonzero. sp (optional): The horizontal velocity (speed), in meters per second, that the client device is traveling. alt (optional): The altitude of the client device, in meters. are (optional): The radius, in meters, that specifies the vertical accuracy of the coordinates. Specify this key only if you specify the alt key. Although many of the keys are optional, the more information that you provide, the more accurate the location results are. Although optional, you are encouraged to always specify the user's geographical location. Providing the location is especially important if the client's IP address does not accurately reflect the user's physical location (for example, if the client uses VPN). For optimal results, you should include this header and the X-Search-ClientIP header, but at a minimum, you should include this header. </p>"
    - id: actionType
      type: com.microsoft.azure.cognitiveservices.spellcheck._action_type
      description: "<p>A string that's used by logging to determine whether the request is coming from an interactive session or a page load. The following are the possible values. 1) Edit—The request is from an interactive session 2) Load—The request is from a page load. Possible values include: 'Edit', 'Load' </p>"
    - id: appName
      type: "26831127"
      description: <p>The unique name of your app. The name must be known by Bing. Do not include this parameter unless you have previously contacted Bing to get a unique app name. To get a unique name, contact your Bing Business Development manager. </p>
    - id: countryCode
      type: "26831127"
      description: <p>A 2-character country code of the country where the results come from. This API supports only the United States market. If you specify this query parameter, it must be set to us. If you set this parameter, you must also specify the Accept-Language header. Bing uses the first supported language it finds from the languages list, and combine that language with the country code that you specify to determine the market to return results for. If the languages list does not include a supported language, Bing finds the closest language and market that supports the request, or it may use an aggregated or default market for the results instead of a specified one. You should use this query parameter and the Accept-Language query parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang query parameters. This parameter and the mkt query parameter are mutually exclusive—do not specify both. </p>
    - id: clientMachineName
      type: "26831127"
      description: <p>A unique name of the device that the request is being made from. Generate a unique value for each device (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: docId
      type: "26831127"
      description: <p>A unique ID that identifies the document that the text belongs to. Generate a unique value for each document (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: market
      type: "26831127"
      description: <p>The market where the results come from. You are strongly encouraged to always specify the market, if known. Specifying the market helps Bing route the request and return an appropriate and optimal response. This parameter and the cc query parameter are mutually exclusive—do not specify both. </p>
    - id: sessionId
      type: "26831127"
      description: <p>A unique ID that identifies this user session. Generate a unique value for each user session (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections </p>
    - id: setLang
      type: "26831127"
      description: <p>The language to use for user interface strings. Specify the language using the ISO 639-1 2-letter language code. For example, the language code for English is EN. The default is EN (English). Although optional, you should always specify the language. Typically, you set setLang to the same language specified by mkt unless the user wants the user interface strings displayed in a different language. This parameter and the Accept-Language header are mutually exclusive—do not specify both. A user interface string is a string that's used as a label in a user interface. There are few user interface strings in the JSON response objects. Also, any links to Bing.com properties in the response objects apply the specified language. </p>
    - id: userId
      type: "26831127"
      description: <p>A unique ID that identifies the user. Generate a unique value for each user (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: mode
      type: "26831127"
      description: "<p>The type of spelling and grammar checks to perform. The following are the possible values (the values are case insensitive). The default is Proof. 1) Proof—Finds most spelling and grammar mistakes. 2) Spell—Finds most spelling mistakes but does not find some of the grammar errors that Proof catches (for example, capitalization and repeated words). Possible values include: 'Proof', 'Spell' </p>"
    - id: preContextText
      type: "26831127"
      description: <p>A string that gives context to the text string. For example, the text string petal is valid. However, if you set preContextText to bike, the context changes and the text string becomes not valid. In this case, the API suggests that you change petal to pedal (as in bike pedal). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. </p>
    - id: postContextText
      type: "26831127"
      description: <p>A string that gives context to the text string. For example, the text string read is valid. However, if you set postContextText to carpet, the context changes and the text string becomes not valid. In this case, the API suggests that you change read to red (as in red carpet). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. </p>
    - id: text
      type: "26831127"
      description: <p>The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings. </p>
    return:
      type: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner
      description: <p>the <xref uid="com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner" data-throw-if-not-resolved="false">SpellCheckInner</xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: com.microsoft.azure.cognitiveservices.spellcheck._error_response_exception
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerAsync()
  id: spellCheckerAsync()
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: spellCheckerAsync()
  nameWithType: SpellCheckAPIImpl.spellCheckerAsync()
  fullName: Observable<SpellCheckInner> com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.spellCheckerAsync()
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerAsync*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 208
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public Observable<SpellCheckInner> spellCheckerAsync()
    return:
      type: c2d0e8c6com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_innera08ddfce
      description: <p>the observable to the <xref uid="com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner" data-throw-if-not-resolved="false">SpellCheckInner</xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerAsync(final ServiceCallback<SpellCheckInner>)
  id: spellCheckerAsync(final ServiceCallback<SpellCheckInner>)
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: spellCheckerAsync(final ServiceCallback<SpellCheckInner> serviceCallback)
  nameWithType: SpellCheckAPIImpl.spellCheckerAsync(final ServiceCallback<SpellCheckInner> serviceCallback)
  fullName: ServiceFuture<SpellCheckInner> com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.spellCheckerAsync(final ServiceCallback<SpellCheckInner> serviceCallback)
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerAsync*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 198
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<SpellCheckInner> spellCheckerAsync(final ServiceCallback<SpellCheckInner> serviceCallback)
    parameters:
    - id: serviceCallback
      type: 897eb10acom.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_innera08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: c522ce07com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_innera08ddfce
      description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceFuture</xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerAsync(String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String,String)
  id: spellCheckerAsync(String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String,String)
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: spellCheckerAsync(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text)
  nameWithType: SpellCheckAPIImpl.spellCheckerAsync(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text)
  fullName: Observable<SpellCheckInner> com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.spellCheckerAsync(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text)
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerAsync*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 340
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public Observable<SpellCheckInner> spellCheckerAsync(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text)
    parameters:
    - id: acceptLanguage
      type: "26831127"
      description: <p>A comma-delimited list of one or more languages to use for user interface strings. The list is in decreasing order of preference. For additional information, including expected format, see [RFC2616](<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html</a>). This header and the setLang query parameter are mutually exclusive; do not specify both. If you set this header, you must also specify the cc query parameter. Bing will use the first supported language it finds from the list, and combine that language with the cc parameter value to determine the market to return results for. If the list does not include a supported language, Bing will find the closest language and market that supports the request, and may use an aggregated or default market for the results instead of a specified one. You should use this header and the cc query parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang query parameters. A user interface string is a string that's used as a label in a user interface. There are very few user interface strings in the JSON response objects. Any links in the response objects to Bing.com properties will apply the specified language. </p>
    - id: pragma
      type: "26831127"
      description: '<p>By default, Bing returns cached content, if available. To prevent Bing from returning cached content, set the Pragma header to no-cache (for example, Pragma: no-cache). </p>'
    - id: clientId
      type: "26831127"
      description: "<p>Bing uses this header to provide users with consistent behavior across Bing API calls. Bing often flights new features and improvements, and it uses the client ID as a key for assigning traffic on different flights. If you do not use the same client ID for a user across multiple requests, then Bing may assign the user to multiple conflicting flights. Being assigned to multiple conflicting flights can lead to an inconsistent user experience. For example, if the second request has a different flight assignment than the first, the experience may be unexpected. Also, Bing can use the client ID to tailor web results to that client ID’s search history, providing a richer experience for the user. Bing also uses this header to help improve result rankings by analyzing the activity generated by a client ID. The relevance improvements help with better quality of results delivered by Bing APIs and in turn enables higher click-through rates for the API consumer. IMPORTANT: Although optional, you should consider this header required. Persisting the client ID across multiple requests for the same end user and device combination enables 1) the API consumer to receive a consistent user experience, and 2) higher click-through rates via better quality of results from the Bing APIs. Each user that uses your application on the device must have a unique, Bing generated client ID. If you do not include this header in the request, Bing generates an ID and returns it in the X-MSEdge-ClientID response header. The only time that you should NOT include this header in a request is the first time the user uses your app on that device. Use the client ID for each Bing API request that your app makes for this user on the device. Persist the client ID. To persist the ID in a browser app, use a persistent HTTP cookie to ensure the ID is used across all sessions. Do not use a session cookie. For other apps such as mobile apps, use the device's persistent storage to persist the ID. The next time the user uses your app on that device, get the client ID that you persisted. Bing responses may or may not include this header. If the response includes this header, capture the client ID and use it for all subsequent Bing requests for the user on that device. If you include the X-MSEdge-ClientID, you must not include cookies in the request. </p>"
    - id: clientIp
      type: "26831127"
      description: <p>The IPv4 or IPv6 address of the client device. The IP address is used to discover the user's location. Bing uses the location information to determine safe search behavior. Although optional, you are encouraged to always specify this header and the X-Search-Location header. Do not obfuscate the address (for example, by changing the last octet to 0). Obfuscating the address results in the location not being anywhere near the device's actual location, which may result in Bing serving erroneous results. </p>
    - id: location
      type: "26831127"
      description: "<p>A semicolon-delimited list of key/value pairs that describe the client's geographical location. Bing uses the location information to determine safe search behavior and to return relevant local content. Specify the key/value pair as &lt;key&gt;:&lt;value&gt;. The following are the keys that you use to specify the user's location. lat (required): The latitude of the client's location, in degrees. The latitude must be greater than or equal to -90.0 and less than or equal to +90.0. Negative values indicate southern latitudes and positive values indicate northern latitudes. long (required): The longitude of the client's location, in degrees. The longitude must be greater than or equal to -180.0 and less than or equal to +180.0. Negative values indicate western longitudes and positive values indicate eastern longitudes. re (required): The radius, in meters, which specifies the horizontal accuracy of the coordinates. Pass the value returned by the device's location service. Typical values might be 22m for GPS/Wi-Fi, 380m for cell tower triangulation, and 18,000m for reverse IP lookup. ts (optional): The UTC UNIX timestamp of when the client was at the location. (The UNIX timestamp is the number of seconds since January 1, 1970.) head (optional): The client's relative heading or direction of travel. Specify the direction of travel as degrees from 0 through 360, counting clockwise relative to true north. Specify this key only if the sp key is nonzero. sp (optional): The horizontal velocity (speed), in meters per second, that the client device is traveling. alt (optional): The altitude of the client device, in meters. are (optional): The radius, in meters, that specifies the vertical accuracy of the coordinates. Specify this key only if you specify the alt key. Although many of the keys are optional, the more information that you provide, the more accurate the location results are. Although optional, you are encouraged to always specify the user's geographical location. Providing the location is especially important if the client's IP address does not accurately reflect the user's physical location (for example, if the client uses VPN). For optimal results, you should include this header and the X-Search-ClientIP header, but at a minimum, you should include this header. </p>"
    - id: actionType
      type: com.microsoft.azure.cognitiveservices.spellcheck._action_type
      description: "<p>A string that's used by logging to determine whether the request is coming from an interactive session or a page load. The following are the possible values. 1) Edit—The request is from an interactive session 2) Load—The request is from a page load. Possible values include: 'Edit', 'Load' </p>"
    - id: appName
      type: "26831127"
      description: <p>The unique name of your app. The name must be known by Bing. Do not include this parameter unless you have previously contacted Bing to get a unique app name. To get a unique name, contact your Bing Business Development manager. </p>
    - id: countryCode
      type: "26831127"
      description: <p>A 2-character country code of the country where the results come from. This API supports only the United States market. If you specify this query parameter, it must be set to us. If you set this parameter, you must also specify the Accept-Language header. Bing uses the first supported language it finds from the languages list, and combine that language with the country code that you specify to determine the market to return results for. If the languages list does not include a supported language, Bing finds the closest language and market that supports the request, or it may use an aggregated or default market for the results instead of a specified one. You should use this query parameter and the Accept-Language query parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang query parameters. This parameter and the mkt query parameter are mutually exclusive—do not specify both. </p>
    - id: clientMachineName
      type: "26831127"
      description: <p>A unique name of the device that the request is being made from. Generate a unique value for each device (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: docId
      type: "26831127"
      description: <p>A unique ID that identifies the document that the text belongs to. Generate a unique value for each document (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: market
      type: "26831127"
      description: <p>The market where the results come from. You are strongly encouraged to always specify the market, if known. Specifying the market helps Bing route the request and return an appropriate and optimal response. This parameter and the cc query parameter are mutually exclusive—do not specify both. </p>
    - id: sessionId
      type: "26831127"
      description: <p>A unique ID that identifies this user session. Generate a unique value for each user session (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections </p>
    - id: setLang
      type: "26831127"
      description: <p>The language to use for user interface strings. Specify the language using the ISO 639-1 2-letter language code. For example, the language code for English is EN. The default is EN (English). Although optional, you should always specify the language. Typically, you set setLang to the same language specified by mkt unless the user wants the user interface strings displayed in a different language. This parameter and the Accept-Language header are mutually exclusive—do not specify both. A user interface string is a string that's used as a label in a user interface. There are few user interface strings in the JSON response objects. Also, any links to Bing.com properties in the response objects apply the specified language. </p>
    - id: userId
      type: "26831127"
      description: <p>A unique ID that identifies the user. Generate a unique value for each user (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: mode
      type: "26831127"
      description: "<p>The type of spelling and grammar checks to perform. The following are the possible values (the values are case insensitive). The default is Proof. 1) Proof—Finds most spelling and grammar mistakes. 2) Spell—Finds most spelling mistakes but does not find some of the grammar errors that Proof catches (for example, capitalization and repeated words). Possible values include: 'Proof', 'Spell' </p>"
    - id: preContextText
      type: "26831127"
      description: <p>A string that gives context to the text string. For example, the text string petal is valid. However, if you set preContextText to bike, the context changes and the text string becomes not valid. In this case, the API suggests that you change petal to pedal (as in bike pedal). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. </p>
    - id: postContextText
      type: "26831127"
      description: <p>A string that gives context to the text string. For example, the text string read is valid. However, if you set postContextText to carpet, the context changes and the text string becomes not valid. In this case, the API suggests that you change read to red (as in red carpet). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. </p>
    - id: text
      type: "26831127"
      description: <p>The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings. </p>
    return:
      type: c2d0e8c6com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_innera08ddfce
      description: <p>the observable to the <xref uid="com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner" data-throw-if-not-resolved="false">SpellCheckInner</xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerAsync(String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String,String,final ServiceCallback<SpellCheckInner>)
  id: spellCheckerAsync(String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String,String,final ServiceCallback<SpellCheckInner>)
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: spellCheckerAsync(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text, final ServiceCallback<SpellCheckInner> serviceCallback)
  nameWithType: SpellCheckAPIImpl.spellCheckerAsync(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text, final ServiceCallback<SpellCheckInner> serviceCallback)
  fullName: ServiceFuture<SpellCheckInner> com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.spellCheckerAsync(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text, final ServiceCallback<SpellCheckInner> serviceCallback)
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerAsync*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 312
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<SpellCheckInner> spellCheckerAsync(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text, final ServiceCallback<SpellCheckInner> serviceCallback)
    parameters:
    - id: acceptLanguage
      type: "26831127"
      description: <p>A comma-delimited list of one or more languages to use for user interface strings. The list is in decreasing order of preference. For additional information, including expected format, see [RFC2616](<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html</a>). This header and the setLang query parameter are mutually exclusive; do not specify both. If you set this header, you must also specify the cc query parameter. Bing will use the first supported language it finds from the list, and combine that language with the cc parameter value to determine the market to return results for. If the list does not include a supported language, Bing will find the closest language and market that supports the request, and may use an aggregated or default market for the results instead of a specified one. You should use this header and the cc query parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang query parameters. A user interface string is a string that's used as a label in a user interface. There are very few user interface strings in the JSON response objects. Any links in the response objects to Bing.com properties will apply the specified language. </p>
    - id: pragma
      type: "26831127"
      description: '<p>By default, Bing returns cached content, if available. To prevent Bing from returning cached content, set the Pragma header to no-cache (for example, Pragma: no-cache). </p>'
    - id: clientId
      type: "26831127"
      description: "<p>Bing uses this header to provide users with consistent behavior across Bing API calls. Bing often flights new features and improvements, and it uses the client ID as a key for assigning traffic on different flights. If you do not use the same client ID for a user across multiple requests, then Bing may assign the user to multiple conflicting flights. Being assigned to multiple conflicting flights can lead to an inconsistent user experience. For example, if the second request has a different flight assignment than the first, the experience may be unexpected. Also, Bing can use the client ID to tailor web results to that client ID’s search history, providing a richer experience for the user. Bing also uses this header to help improve result rankings by analyzing the activity generated by a client ID. The relevance improvements help with better quality of results delivered by Bing APIs and in turn enables higher click-through rates for the API consumer. IMPORTANT: Although optional, you should consider this header required. Persisting the client ID across multiple requests for the same end user and device combination enables 1) the API consumer to receive a consistent user experience, and 2) higher click-through rates via better quality of results from the Bing APIs. Each user that uses your application on the device must have a unique, Bing generated client ID. If you do not include this header in the request, Bing generates an ID and returns it in the X-MSEdge-ClientID response header. The only time that you should NOT include this header in a request is the first time the user uses your app on that device. Use the client ID for each Bing API request that your app makes for this user on the device. Persist the client ID. To persist the ID in a browser app, use a persistent HTTP cookie to ensure the ID is used across all sessions. Do not use a session cookie. For other apps such as mobile apps, use the device's persistent storage to persist the ID. The next time the user uses your app on that device, get the client ID that you persisted. Bing responses may or may not include this header. If the response includes this header, capture the client ID and use it for all subsequent Bing requests for the user on that device. If you include the X-MSEdge-ClientID, you must not include cookies in the request. </p>"
    - id: clientIp
      type: "26831127"
      description: <p>The IPv4 or IPv6 address of the client device. The IP address is used to discover the user's location. Bing uses the location information to determine safe search behavior. Although optional, you are encouraged to always specify this header and the X-Search-Location header. Do not obfuscate the address (for example, by changing the last octet to 0). Obfuscating the address results in the location not being anywhere near the device's actual location, which may result in Bing serving erroneous results. </p>
    - id: location
      type: "26831127"
      description: "<p>A semicolon-delimited list of key/value pairs that describe the client's geographical location. Bing uses the location information to determine safe search behavior and to return relevant local content. Specify the key/value pair as &lt;key&gt;:&lt;value&gt;. The following are the keys that you use to specify the user's location. lat (required): The latitude of the client's location, in degrees. The latitude must be greater than or equal to -90.0 and less than or equal to +90.0. Negative values indicate southern latitudes and positive values indicate northern latitudes. long (required): The longitude of the client's location, in degrees. The longitude must be greater than or equal to -180.0 and less than or equal to +180.0. Negative values indicate western longitudes and positive values indicate eastern longitudes. re (required): The radius, in meters, which specifies the horizontal accuracy of the coordinates. Pass the value returned by the device's location service. Typical values might be 22m for GPS/Wi-Fi, 380m for cell tower triangulation, and 18,000m for reverse IP lookup. ts (optional): The UTC UNIX timestamp of when the client was at the location. (The UNIX timestamp is the number of seconds since January 1, 1970.) head (optional): The client's relative heading or direction of travel. Specify the direction of travel as degrees from 0 through 360, counting clockwise relative to true north. Specify this key only if the sp key is nonzero. sp (optional): The horizontal velocity (speed), in meters per second, that the client device is traveling. alt (optional): The altitude of the client device, in meters. are (optional): The radius, in meters, that specifies the vertical accuracy of the coordinates. Specify this key only if you specify the alt key. Although many of the keys are optional, the more information that you provide, the more accurate the location results are. Although optional, you are encouraged to always specify the user's geographical location. Providing the location is especially important if the client's IP address does not accurately reflect the user's physical location (for example, if the client uses VPN). For optimal results, you should include this header and the X-Search-ClientIP header, but at a minimum, you should include this header. </p>"
    - id: actionType
      type: com.microsoft.azure.cognitiveservices.spellcheck._action_type
      description: "<p>A string that's used by logging to determine whether the request is coming from an interactive session or a page load. The following are the possible values. 1) Edit—The request is from an interactive session 2) Load—The request is from a page load. Possible values include: 'Edit', 'Load' </p>"
    - id: appName
      type: "26831127"
      description: <p>The unique name of your app. The name must be known by Bing. Do not include this parameter unless you have previously contacted Bing to get a unique app name. To get a unique name, contact your Bing Business Development manager. </p>
    - id: countryCode
      type: "26831127"
      description: <p>A 2-character country code of the country where the results come from. This API supports only the United States market. If you specify this query parameter, it must be set to us. If you set this parameter, you must also specify the Accept-Language header. Bing uses the first supported language it finds from the languages list, and combine that language with the country code that you specify to determine the market to return results for. If the languages list does not include a supported language, Bing finds the closest language and market that supports the request, or it may use an aggregated or default market for the results instead of a specified one. You should use this query parameter and the Accept-Language query parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang query parameters. This parameter and the mkt query parameter are mutually exclusive—do not specify both. </p>
    - id: clientMachineName
      type: "26831127"
      description: <p>A unique name of the device that the request is being made from. Generate a unique value for each device (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: docId
      type: "26831127"
      description: <p>A unique ID that identifies the document that the text belongs to. Generate a unique value for each document (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: market
      type: "26831127"
      description: <p>The market where the results come from. You are strongly encouraged to always specify the market, if known. Specifying the market helps Bing route the request and return an appropriate and optimal response. This parameter and the cc query parameter are mutually exclusive—do not specify both. </p>
    - id: sessionId
      type: "26831127"
      description: <p>A unique ID that identifies this user session. Generate a unique value for each user session (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections </p>
    - id: setLang
      type: "26831127"
      description: <p>The language to use for user interface strings. Specify the language using the ISO 639-1 2-letter language code. For example, the language code for English is EN. The default is EN (English). Although optional, you should always specify the language. Typically, you set setLang to the same language specified by mkt unless the user wants the user interface strings displayed in a different language. This parameter and the Accept-Language header are mutually exclusive—do not specify both. A user interface string is a string that's used as a label in a user interface. There are few user interface strings in the JSON response objects. Also, any links to Bing.com properties in the response objects apply the specified language. </p>
    - id: userId
      type: "26831127"
      description: <p>A unique ID that identifies the user. Generate a unique value for each user (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: mode
      type: "26831127"
      description: "<p>The type of spelling and grammar checks to perform. The following are the possible values (the values are case insensitive). The default is Proof. 1) Proof—Finds most spelling and grammar mistakes. 2) Spell—Finds most spelling mistakes but does not find some of the grammar errors that Proof catches (for example, capitalization and repeated words). Possible values include: 'Proof', 'Spell' </p>"
    - id: preContextText
      type: "26831127"
      description: <p>A string that gives context to the text string. For example, the text string petal is valid. However, if you set preContextText to bike, the context changes and the text string becomes not valid. In this case, the API suggests that you change petal to pedal (as in bike pedal). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. </p>
    - id: postContextText
      type: "26831127"
      description: <p>A string that gives context to the text string. For example, the text string read is valid. However, if you set postContextText to carpet, the context changes and the text string becomes not valid. In this case, the API suggests that you change read to red (as in red carpet). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. </p>
    - id: text
      type: "26831127"
      description: <p>The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings. </p>
    - id: serviceCallback
      type: 897eb10acom.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_innera08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: c522ce07com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_innera08ddfce
      description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceFuture</xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerWithServiceResponseAsync()
  id: spellCheckerWithServiceResponseAsync()
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: spellCheckerWithServiceResponseAsync()
  nameWithType: SpellCheckAPIImpl.spellCheckerWithServiceResponseAsync()
  fullName: Observable<ServiceResponse<SpellCheckInner>> com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.spellCheckerWithServiceResponseAsync()
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 223
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponse<SpellCheckInner>> spellCheckerWithServiceResponseAsync()
    return:
      type: fc480ba2com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_innere7daa122
      description: <p>the observable to the <xref uid="com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner" data-throw-if-not-resolved="false">SpellCheckInner</xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerWithServiceResponseAsync(String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String,String)
  id: spellCheckerWithServiceResponseAsync(String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String,String)
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: spellCheckerWithServiceResponseAsync(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text)
  nameWithType: SpellCheckAPIImpl.spellCheckerWithServiceResponseAsync(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text)
  fullName: Observable<ServiceResponse<SpellCheckInner>> com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.spellCheckerWithServiceResponseAsync(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text)
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 373
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponse<SpellCheckInner>> spellCheckerWithServiceResponseAsync(String acceptLanguage, String pragma, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText, String text)
    parameters:
    - id: acceptLanguage
      type: "26831127"
      description: <p>A comma-delimited list of one or more languages to use for user interface strings. The list is in decreasing order of preference. For additional information, including expected format, see [RFC2616](<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html</a>). This header and the setLang query parameter are mutually exclusive; do not specify both. If you set this header, you must also specify the cc query parameter. Bing will use the first supported language it finds from the list, and combine that language with the cc parameter value to determine the market to return results for. If the list does not include a supported language, Bing will find the closest language and market that supports the request, and may use an aggregated or default market for the results instead of a specified one. You should use this header and the cc query parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang query parameters. A user interface string is a string that's used as a label in a user interface. There are very few user interface strings in the JSON response objects. Any links in the response objects to Bing.com properties will apply the specified language. </p>
    - id: pragma
      type: "26831127"
      description: '<p>By default, Bing returns cached content, if available. To prevent Bing from returning cached content, set the Pragma header to no-cache (for example, Pragma: no-cache). </p>'
    - id: clientId
      type: "26831127"
      description: "<p>Bing uses this header to provide users with consistent behavior across Bing API calls. Bing often flights new features and improvements, and it uses the client ID as a key for assigning traffic on different flights. If you do not use the same client ID for a user across multiple requests, then Bing may assign the user to multiple conflicting flights. Being assigned to multiple conflicting flights can lead to an inconsistent user experience. For example, if the second request has a different flight assignment than the first, the experience may be unexpected. Also, Bing can use the client ID to tailor web results to that client ID’s search history, providing a richer experience for the user. Bing also uses this header to help improve result rankings by analyzing the activity generated by a client ID. The relevance improvements help with better quality of results delivered by Bing APIs and in turn enables higher click-through rates for the API consumer. IMPORTANT: Although optional, you should consider this header required. Persisting the client ID across multiple requests for the same end user and device combination enables 1) the API consumer to receive a consistent user experience, and 2) higher click-through rates via better quality of results from the Bing APIs. Each user that uses your application on the device must have a unique, Bing generated client ID. If you do not include this header in the request, Bing generates an ID and returns it in the X-MSEdge-ClientID response header. The only time that you should NOT include this header in a request is the first time the user uses your app on that device. Use the client ID for each Bing API request that your app makes for this user on the device. Persist the client ID. To persist the ID in a browser app, use a persistent HTTP cookie to ensure the ID is used across all sessions. Do not use a session cookie. For other apps such as mobile apps, use the device's persistent storage to persist the ID. The next time the user uses your app on that device, get the client ID that you persisted. Bing responses may or may not include this header. If the response includes this header, capture the client ID and use it for all subsequent Bing requests for the user on that device. If you include the X-MSEdge-ClientID, you must not include cookies in the request. </p>"
    - id: clientIp
      type: "26831127"
      description: <p>The IPv4 or IPv6 address of the client device. The IP address is used to discover the user's location. Bing uses the location information to determine safe search behavior. Although optional, you are encouraged to always specify this header and the X-Search-Location header. Do not obfuscate the address (for example, by changing the last octet to 0). Obfuscating the address results in the location not being anywhere near the device's actual location, which may result in Bing serving erroneous results. </p>
    - id: location
      type: "26831127"
      description: "<p>A semicolon-delimited list of key/value pairs that describe the client's geographical location. Bing uses the location information to determine safe search behavior and to return relevant local content. Specify the key/value pair as &lt;key&gt;:&lt;value&gt;. The following are the keys that you use to specify the user's location. lat (required): The latitude of the client's location, in degrees. The latitude must be greater than or equal to -90.0 and less than or equal to +90.0. Negative values indicate southern latitudes and positive values indicate northern latitudes. long (required): The longitude of the client's location, in degrees. The longitude must be greater than or equal to -180.0 and less than or equal to +180.0. Negative values indicate western longitudes and positive values indicate eastern longitudes. re (required): The radius, in meters, which specifies the horizontal accuracy of the coordinates. Pass the value returned by the device's location service. Typical values might be 22m for GPS/Wi-Fi, 380m for cell tower triangulation, and 18,000m for reverse IP lookup. ts (optional): The UTC UNIX timestamp of when the client was at the location. (The UNIX timestamp is the number of seconds since January 1, 1970.) head (optional): The client's relative heading or direction of travel. Specify the direction of travel as degrees from 0 through 360, counting clockwise relative to true north. Specify this key only if the sp key is nonzero. sp (optional): The horizontal velocity (speed), in meters per second, that the client device is traveling. alt (optional): The altitude of the client device, in meters. are (optional): The radius, in meters, that specifies the vertical accuracy of the coordinates. Specify this key only if you specify the alt key. Although many of the keys are optional, the more information that you provide, the more accurate the location results are. Although optional, you are encouraged to always specify the user's geographical location. Providing the location is especially important if the client's IP address does not accurately reflect the user's physical location (for example, if the client uses VPN). For optimal results, you should include this header and the X-Search-ClientIP header, but at a minimum, you should include this header. </p>"
    - id: actionType
      type: com.microsoft.azure.cognitiveservices.spellcheck._action_type
      description: "<p>A string that's used by logging to determine whether the request is coming from an interactive session or a page load. The following are the possible values. 1) Edit—The request is from an interactive session 2) Load—The request is from a page load. Possible values include: 'Edit', 'Load' </p>"
    - id: appName
      type: "26831127"
      description: <p>The unique name of your app. The name must be known by Bing. Do not include this parameter unless you have previously contacted Bing to get a unique app name. To get a unique name, contact your Bing Business Development manager. </p>
    - id: countryCode
      type: "26831127"
      description: <p>A 2-character country code of the country where the results come from. This API supports only the United States market. If you specify this query parameter, it must be set to us. If you set this parameter, you must also specify the Accept-Language header. Bing uses the first supported language it finds from the languages list, and combine that language with the country code that you specify to determine the market to return results for. If the languages list does not include a supported language, Bing finds the closest language and market that supports the request, or it may use an aggregated or default market for the results instead of a specified one. You should use this query parameter and the Accept-Language query parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang query parameters. This parameter and the mkt query parameter are mutually exclusive—do not specify both. </p>
    - id: clientMachineName
      type: "26831127"
      description: <p>A unique name of the device that the request is being made from. Generate a unique value for each device (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: docId
      type: "26831127"
      description: <p>A unique ID that identifies the document that the text belongs to. Generate a unique value for each document (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: market
      type: "26831127"
      description: <p>The market where the results come from. You are strongly encouraged to always specify the market, if known. Specifying the market helps Bing route the request and return an appropriate and optimal response. This parameter and the cc query parameter are mutually exclusive—do not specify both. </p>
    - id: sessionId
      type: "26831127"
      description: <p>A unique ID that identifies this user session. Generate a unique value for each user session (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections </p>
    - id: setLang
      type: "26831127"
      description: <p>The language to use for user interface strings. Specify the language using the ISO 639-1 2-letter language code. For example, the language code for English is EN. The default is EN (English). Although optional, you should always specify the language. Typically, you set setLang to the same language specified by mkt unless the user wants the user interface strings displayed in a different language. This parameter and the Accept-Language header are mutually exclusive—do not specify both. A user interface string is a string that's used as a label in a user interface. There are few user interface strings in the JSON response objects. Also, any links to Bing.com properties in the response objects apply the specified language. </p>
    - id: userId
      type: "26831127"
      description: <p>A unique ID that identifies the user. Generate a unique value for each user (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: mode
      type: "26831127"
      description: "<p>The type of spelling and grammar checks to perform. The following are the possible values (the values are case insensitive). The default is Proof. 1) Proof—Finds most spelling and grammar mistakes. 2) Spell—Finds most spelling mistakes but does not find some of the grammar errors that Proof catches (for example, capitalization and repeated words). Possible values include: 'Proof', 'Spell' </p>"
    - id: preContextText
      type: "26831127"
      description: <p>A string that gives context to the text string. For example, the text string petal is valid. However, if you set preContextText to bike, the context changes and the text string becomes not valid. In this case, the API suggests that you change petal to pedal (as in bike pedal). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. </p>
    - id: postContextText
      type: "26831127"
      description: <p>A string that gives context to the text string. For example, the text string read is valid. However, if you set postContextText to carpet, the context changes and the text string becomes not valid. In this case, the API suggests that you change read to red (as in red carpet). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. </p>
    - id: text
      type: "26831127"
      description: <p>The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings. </p>
    return:
      type: fc480ba2com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_innere7daa122
      description: <p>the observable to the <xref uid="com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner" data-throw-if-not-resolved="false">SpellCheckInner</xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.userAgent()
  id: userAgent()
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: userAgent()
  nameWithType: SpellCheckAPIImpl.userAgent()
  fullName: String com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.userAgent()
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.userAgent*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 160
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>Gets the User-Agent header for the client.</p>

    <p></p>
  syntax:
    content: public String userAgent()
    return:
      type: "26831127"
      description: <p>the user agent string. </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.withAcceptLanguage(String)
  id: withAcceptLanguage(String)
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: withAcceptLanguage(String acceptLanguage)
  nameWithType: SpellCheckAPIImpl.withAcceptLanguage(String acceptLanguage)
  fullName: SpellCheckAPIImpl com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.withAcceptLanguage(String acceptLanguage)
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.withAcceptLanguage*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 65
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>Sets Gets or sets the preferred language for the response.</p>

    <p></p>
  syntax:
    content: public SpellCheckAPIImpl withAcceptLanguage(String acceptLanguage)
    parameters:
    - id: acceptLanguage
      type: "26831127"
      description: <p>the acceptLanguage value. </p>
    return:
      type: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
      description: <p>the service client itself </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.withGenerateClientRequestId(boolean)
  id: withGenerateClientRequestId(boolean)
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: withGenerateClientRequestId(boolean generateClientRequestId)
  nameWithType: SpellCheckAPIImpl.withGenerateClientRequestId(boolean generateClientRequestId)
  fullName: SpellCheckAPIImpl com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.withGenerateClientRequestId(boolean generateClientRequestId)
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.withGenerateClientRequestId*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 111
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>Sets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.</p>

    <p></p>
  syntax:
    content: public SpellCheckAPIImpl withGenerateClientRequestId(boolean generateClientRequestId)
    parameters:
    - id: generateClientRequestId
      type: 4fc6e284
      description: <p>the generateClientRequestId value. </p>
    return:
      type: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
      description: <p>the service client itself </p>
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.withLongRunningOperationRetryTimeout(int)
  id: withLongRunningOperationRetryTimeout(int)
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  langs:
  - java
  name: withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout)
  nameWithType: SpellCheckAPIImpl.withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout)
  fullName: SpellCheckAPIImpl com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout)
  overload: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.withLongRunningOperationRetryTimeout*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/azure-spellcheck/src/main/java/com/microsoft/azure/cognitiveservices/spellcheck/implementation/SpellCheckAPIImpl.java
    startLine: 88
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  summary: >-
    <p>Sets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.</p>

    <p></p>
  syntax:
    content: public SpellCheckAPIImpl withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout)
    parameters:
    - id: longRunningOperationRetryTimeout
      type: f75371fa
      description: <p>the longRunningOperationRetryTimeout value. </p>
    return:
      type: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
      description: <p>the service client itself </p>
references:
- uid: c1c26e8d
  spec.java:
  - name: AzureClient
    fullName: AzureClient
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.getAzureClient*
  name: getAzureClient
  nameWithType: SpellCheckAPIImpl.getAzureClient
  fullName: AzureClient com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.getAzureClient
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.acceptLanguage*
  name: acceptLanguage
  nameWithType: SpellCheckAPIImpl.acceptLanguage
  fullName: String com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.acceptLanguage
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.withAcceptLanguage*
  name: withAcceptLanguage
  nameWithType: SpellCheckAPIImpl.withAcceptLanguage
  fullName: SpellCheckAPIImpl com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.withAcceptLanguage
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.longRunningOperationRetryTimeout*
  name: longRunningOperationRetryTimeout
  nameWithType: SpellCheckAPIImpl.longRunningOperationRetryTimeout
  fullName: int com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.longRunningOperationRetryTimeout
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.withLongRunningOperationRetryTimeout*
  name: withLongRunningOperationRetryTimeout
  nameWithType: SpellCheckAPIImpl.withLongRunningOperationRetryTimeout
  fullName: SpellCheckAPIImpl com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.withLongRunningOperationRetryTimeout
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.generateClientRequestId*
  name: generateClientRequestId
  nameWithType: SpellCheckAPIImpl.generateClientRequestId
  fullName: boolean com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.generateClientRequestId
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.withGenerateClientRequestId*
  name: withGenerateClientRequestId
  nameWithType: SpellCheckAPIImpl.withGenerateClientRequestId
  fullName: SpellCheckAPIImpl com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.withGenerateClientRequestId
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
- uid: d7990412
  spec.java:
  - name: ServiceClientCredentials
    fullName: ServiceClientCredentials
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.SpellCheckAPIImpl*
  name: SpellCheckAPIImpl
  nameWithType: SpellCheckAPIImpl.SpellCheckAPIImpl
  fullName: com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.SpellCheckAPIImpl
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
- uid: 9545a295
  spec.java:
  - name: RestClient
    fullName: RestClient
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.userAgent*
  name: userAgent
  nameWithType: SpellCheckAPIImpl.userAgent
  fullName: String com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.userAgent
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: 9b2a4515
  spec.java:
  - name: RuntimeException
    fullName: RuntimeException
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellChecker*
  name: spellChecker
  nameWithType: SpellCheckAPIImpl.spellChecker
  fullName: SpellCheckInner com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.spellChecker
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
- uid: 897eb10acom.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_innera08ddfce
  spec.java:
  - name: final ServiceCallback<
    fullName: final ServiceCallback<
  - uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner
    name: SpellCheckInner
    fullName: com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckInner
    href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner.yml
  - name: '>'
    fullName: '>'
- uid: c522ce07com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_innera08ddfce
  spec.java:
  - name: ServiceFuture<
    fullName: ServiceFuture<
  - uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner
    name: SpellCheckInner
    fullName: com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckInner
    href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerAsync*
  name: spellCheckerAsync
  nameWithType: SpellCheckAPIImpl.spellCheckerAsync
  fullName: ServiceFuture<SpellCheckInner> com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.spellCheckerAsync
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
- uid: c2d0e8c6com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_innera08ddfce
  spec.java:
  - name: Observable<
    fullName: Observable<
  - uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner
    name: SpellCheckInner
    fullName: com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckInner
    href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner.yml
  - name: '>'
    fullName: '>'
- uid: fc480ba2com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_innere7daa122
  spec.java:
  - name: Observable<ServiceResponse<
    fullName: Observable<ServiceResponse<
  - uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner
    name: SpellCheckInner
    fullName: com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckInner
    href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.spellCheckerWithServiceResponseAsync*
  name: spellCheckerWithServiceResponseAsync
  nameWithType: SpellCheckAPIImpl.spellCheckerWithServiceResponseAsync
  fullName: Observable<ServiceResponse<SpellCheckInner>> com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.spellCheckerWithServiceResponseAsync
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.initialize*
  name: initialize
  nameWithType: SpellCheckAPIImpl.initialize
  fullName: void com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl.initialize
  package: com.microsoft.azure.cognitiveservices.spellcheck.implementation
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl.yml
  name: SpellCheckAPIImpl
  nameWithType: SpellCheckAPIImpl
  fullName: com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckAPIImpl
  type: Class
  summary: <p>Initializes a new instance of the <xref uid="com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_a_p_i_impl" data-throw-if-not-resolved="false">SpellCheckAPIImpl</xref> class. </p>
  syntax: *o1
- uid: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner
  parent: com.microsoft.azure.cognitiveservices.spellcheck.implementation
  href: com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner.yml
  name: SpellCheckInner
  nameWithType: SpellCheckInner
  fullName: com.microsoft.azure.cognitiveservices.spellcheck.implementation.SpellCheckInner
  type: Class
  summary: <p>The <xref uid="com.microsoft.azure.cognitiveservices.spellcheck.implementation._spell_check_inner" data-throw-if-not-resolved="false">SpellCheckInner</xref> model. </p>
  syntax:
    content: public class SpellCheckInner
- uid: com.microsoft.azure.cognitiveservices.spellcheck._error_response_exception
  parent: com.microsoft.azure.cognitiveservices.spellcheck
  href: com.microsoft.azure.cognitiveservices.spellcheck._error_response_exception.yml
  name: ErrorResponseException
  nameWithType: ErrorResponseException
  fullName: com.microsoft.azure.cognitiveservices.spellcheck.ErrorResponseException
  type: Class
  summary: <p>Exception thrown for an invalid response with <xref uid="com.microsoft.azure.cognitiveservices.spellcheck._error_response" data-throw-if-not-resolved="false">ErrorResponse</xref> information. </p>
  syntax:
    content: public class ErrorResponseException
- uid: com.microsoft.azure.cognitiveservices.spellcheck._action_type
  parent: com.microsoft.azure.cognitiveservices.spellcheck
  href: com.microsoft.azure.cognitiveservices.spellcheck._action_type.yml
  name: ActionType
  nameWithType: ActionType
  fullName: com.microsoft.azure.cognitiveservices.spellcheck.ActionType
  type: Class
  summary: <p>Defines values for <xref uid="com.microsoft.azure.cognitiveservices.spellcheck._action_type" data-throw-if-not-resolved="false">ActionType</xref>. </p>
  syntax:
    content: public class ActionType

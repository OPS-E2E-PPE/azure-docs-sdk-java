items:
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  id: _file_systems_impl
  parent: com.microsoft.azure.management.datalake.store.implementation
  children:
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.append(String,String,byte[])
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.append(String,String,byte[],Long)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.appendAsync(String,String,byte[])
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.appendAsync(String,String,byte[],final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.appendAsync(String,String,byte[],Long)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.appendAsync(String,String,byte[],Long,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.checkAccess(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.checkAccess(String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.checkAccessAsync(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.checkAccessAsync(String,String,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.checkAccessAsync(String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.checkAccessAsync(String,String,String,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concat(String,String,List< String >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concatAsync(String,String,List< String >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concatAsync(String,String,List< String >,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concurrentAppend(String,String,byte[])
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concurrentAppend(String,String,byte[],AppendModeType)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concurrentAppendAsync(String,String,byte[])
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concurrentAppendAsync(String,String,byte[],AppendModeType)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concurrentAppendAsync(String,String,byte[],AppendModeType,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concurrentAppendAsync(String,String,byte[],final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.create(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.create(String,String,byte[],Boolean)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.createAsync(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.createAsync(String,String,byte[],Boolean)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.createAsync(String,String,byte[],Boolean,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.createAsync(String,String,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.delete(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.delete(String,String,Boolean)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.deleteAsync(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.deleteAsync(String,String,Boolean)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.deleteAsync(String,String,Boolean,final ServiceCallback< FileOperationResult >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.deleteAsync(String,String,final ServiceCallback< FileOperationResult >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.FileSystemsImpl(Retrofit,DataLakeStoreFileSystemManagementClientImpl)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getAclStatus(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getAclStatusAsync(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getAclStatusAsync(String,String,final ServiceCallback< AclStatusResult >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getContentSummary(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getContentSummaryAsync(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getContentSummaryAsync(String,String,final ServiceCallback< ContentSummaryResult >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getFileStatus(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getFileStatusAsync(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getFileStatusAsync(String,String,final ServiceCallback< FileStatusResult >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.listFileStatus(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.listFileStatus(String,String,Integer,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.listFileStatusAsync(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.listFileStatusAsync(String,String,final ServiceCallback< FileStatusesResult >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.listFileStatusAsync(String,String,Integer,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.listFileStatusAsync(String,String,Integer,String,String,final ServiceCallback< FileStatusesResult >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.mkdirs(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.mkdirsAsync(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.mkdirsAsync(String,String,final ServiceCallback< FileOperationResult >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.modifyAclEntries(String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.modifyAclEntriesAsync(String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.modifyAclEntriesAsync(String,String,String,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.msConcat(String,String,byte[])
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.msConcat(String,String,byte[],Boolean)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.msConcatAsync(String,String,byte[])
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.msConcatAsync(String,String,byte[],Boolean)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.msConcatAsync(String,String,byte[],Boolean,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.msConcatAsync(String,String,byte[],final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.open(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.open(String,String,Long,Long)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.openAsync(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.openAsync(String,String,final ServiceCallback< InputStream >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.openAsync(String,String,Long,Long)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.openAsync(String,String,Long,Long,final ServiceCallback< InputStream >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.removeAclEntries(String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.removeAclEntriesAsync(String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.removeAclEntriesAsync(String,String,String,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.rename(String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.renameAsync(String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.renameAsync(String,String,String,final ServiceCallback< FileOperationResult >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setAcl(String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setAclAsync(String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setAclAsync(String,String,String,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setOwner(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setOwner(String,String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setOwnerAsync(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setOwnerAsync(String,String,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setOwnerAsync(String,String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setOwnerAsync(String,String,String,String,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setPermission(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setPermission(String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setPermissionAsync(String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setPermissionAsync(String,String,final ServiceCallback< Void >)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setPermissionAsync(String,String,String)
  - com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setPermissionAsync(String,String,String,final ServiceCallback< Void >)
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: FileSystemsImpl
  fullName: com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl
  type: Class
  source:
    remote: &o0
      path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 51
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: <p>An instance of this class provides access to all the operations defined in <xref href="com.microsoft.azure.management.datalake.store._file_systems" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: &o1
    content: public class FileSystemsImpl implements FileSystems
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.management.datalake.store._file_systems
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.append(String,String,byte[])
  id: append(String,String,byte[])
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: append(String accountName, String directFilePath, byte[] streamContents)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.append(String accountName, String directFilePath, byte[] streamContents)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1025
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Appends to the specified file. This method does not support multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option. Use the ConcurrentAppend option if you would like support for concurrent appends.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > append(String accountName, String directFilePath, byte[] streamContents)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.append(String,String,byte[])
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.append(String,String,byte[],Long)
  id: append(String,String,byte[],Long)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: append(String accountName, String directFilePath, byte[] streamContents, Long offset)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.append(String accountName, String directFilePath, byte[] streamContents, Long offset)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1098
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Appends to the specified file. This method does not support multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option. Use the ConcurrentAppend option if you would like support for concurrent appends.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > append(String accountName, String directFilePath, byte[] streamContents, Long offset)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: offset
      type: 34f09483
      description: <p>The optional offset in the stream to begin the append operation. Default is to append at the end of the stream. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.append(String,String,byte[],Long)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.appendAsync(String,String,byte[])
  id: appendAsync(String,String,byte[])
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: appendAsync(String accountName, String directFilePath, byte[] streamContents)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.appendAsync(String accountName, String directFilePath, byte[] streamContents)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1050
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Appends to the specified file. This method does not support multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option. Use the ConcurrentAppend option if you would like support for concurrent appends.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > appendAsync(String accountName, String directFilePath, byte[] streamContents)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.appendAsync(String,String,byte[],final ServiceCallback< Void >)
  id: appendAsync(String,String,byte[],final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: appendAsync(String accountName, String directFilePath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.appendAsync(String accountName, String directFilePath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1038
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Appends to the specified file. This method does not support multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option. Use the ConcurrentAppend option if you would like support for concurrent appends.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > appendAsync(String accountName, String directFilePath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.appendAsync(String,String,byte[],final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.appendAsync(String,String,byte[],Long)
  id: appendAsync(String,String,byte[],Long)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: appendAsync(String accountName, String directFilePath, byte[] streamContents, Long offset)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.appendAsync(String accountName, String directFilePath, byte[] streamContents, Long offset)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1125
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Appends to the specified file. This method does not support multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option. Use the ConcurrentAppend option if you would like support for concurrent appends.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > appendAsync(String accountName, String directFilePath, byte[] streamContents, Long offset)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: offset
      type: 34f09483
      description: <p>The optional offset in the stream to begin the append operation. Default is to append at the end of the stream. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.appendAsync(String,String,byte[],Long)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.appendAsync(String,String,byte[],Long,final ServiceCallback< Void >)
  id: appendAsync(String,String,byte[],Long,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: appendAsync(String accountName, String directFilePath, byte[] streamContents, Long offset, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.appendAsync(String accountName, String directFilePath, byte[] streamContents, Long offset, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1112
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Appends to the specified file. This method does not support multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option. Use the ConcurrentAppend option if you would like support for concurrent appends.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > appendAsync(String accountName, String directFilePath, byte[] streamContents, Long offset, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: offset
      type: 34f09483
      description: <p>The optional offset in the stream to begin the append operation. Default is to append at the end of the stream. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.appendAsync(String,String,byte[],Long,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.checkAccess(String,String)
  id: checkAccess(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: checkAccess(String accountName, String path)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.checkAccess(String accountName, String path)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 313
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Checks if the specified access is available at the given path.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > checkAccess(String accountName, String path)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to check access. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.checkAccess(String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.checkAccess(String,String,String)
  id: checkAccess(String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: checkAccess(String accountName, String path, String fsaction)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.checkAccess(String accountName, String path, String fsaction)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 377
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Checks if the specified access is available at the given path.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > checkAccess(String accountName, String path, String fsaction)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to check access. </p>
    - id: fsaction
      type: "26831127"
      description: <p>File system operation read/write/execute in string form, matching regex pattern '[rwx-]{3}' </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.checkAccess(String,String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.checkAccessAsync(String,String)
  id: checkAccessAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: checkAccessAsync(String accountName, String path)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.checkAccessAsync(String accountName, String path)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 336
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Checks if the specified access is available at the given path.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > checkAccessAsync(String accountName, String path)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to check access. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.checkAccessAsync(String,String,final ServiceCallback< Void >)
  id: checkAccessAsync(String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: checkAccessAsync(String accountName, String path, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.checkAccessAsync(String accountName, String path, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 325
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Checks if the specified access is available at the given path.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > checkAccessAsync(String accountName, String path, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to check access. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.checkAccessAsync(String,String,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.checkAccessAsync(String,String,String)
  id: checkAccessAsync(String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: checkAccessAsync(String accountName, String path, String fsaction)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.checkAccessAsync(String accountName, String path, String fsaction)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 402
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Checks if the specified access is available at the given path.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > checkAccessAsync(String accountName, String path, String fsaction)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to check access. </p>
    - id: fsaction
      type: "26831127"
      description: <p>File system operation read/write/execute in string form, matching regex pattern '[rwx-]{3}' </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.checkAccessAsync(String,String,String)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.checkAccessAsync(String,String,String,final ServiceCallback< Void >)
  id: checkAccessAsync(String,String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: checkAccessAsync(String accountName, String path, String fsaction, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.checkAccessAsync(String accountName, String path, String fsaction, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 390
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Checks if the specified access is available at the given path.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > checkAccessAsync(String accountName, String path, String fsaction, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to check access. </p>
    - id: fsaction
      type: "26831127"
      description: <p>File system operation read/write/execute in string form, matching regex pattern '[rwx-]{3}' </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.checkAccessAsync(String,String,String,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concat(String,String,List< String >)
  id: concat(String,String,List< String >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: concat(String accountName, String destinationPath, List< String > sources)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.concat(String accountName, String destinationPath, List< String > sources)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 518
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Concatenates the list of source files into the destination file, removing all source files upon success.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > concat(String accountName, String destinationPath, List< String > sources)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: destinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: sources
      type: f35af49b
      description: <p>A list of comma seperated Data Lake Store paths (starting with '/') of the files to concatenate, in the order in which they should be concatenated. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.concat(String,String,List< String >)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concatAsync(String,String,List< String >)
  id: concatAsync(String,String,List< String >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: concatAsync(String accountName, String destinationPath, List< String > sources)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.concatAsync(String accountName, String destinationPath, List< String > sources)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 543
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Concatenates the list of source files into the destination file, removing all source files upon success.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > concatAsync(String accountName, String destinationPath, List< String > sources)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: destinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: sources
      type: f35af49b
      description: <p>A list of comma seperated Data Lake Store paths (starting with '/') of the files to concatenate, in the order in which they should be concatenated. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.concatAsync(String,String,List< String >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concatAsync(String,String,List< String >,final ServiceCallback< Void >)
  id: concatAsync(String,String,List< String >,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: concatAsync(String accountName, String destinationPath, List< String > sources, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.concatAsync(String accountName, String destinationPath, List< String > sources, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 531
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Concatenates the list of source files into the destination file, removing all source files upon success.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > concatAsync(String accountName, String destinationPath, List< String > sources, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: destinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: sources
      type: f35af49b
      description: <p>A list of comma seperated Data Lake Store paths (starting with '/') of the files to concatenate, in the order in which they should be concatenated. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.concatAsync(String,String,List< String >,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concurrentAppend(String,String,byte[])
  id: concurrentAppend(String,String,byte[])
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: concurrentAppend(String accountName, String filePath, byte[] streamContents)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.concurrentAppend(String accountName, String filePath, byte[] streamContents)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 163
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Appends to the specified file. This method supports multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > concurrentAppend(String accountName, String filePath, byte[] streamContents)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append using concurrent append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.concurrentAppend(String,String,byte[])
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concurrentAppend(String,String,byte[],AppendModeType)
  id: concurrentAppend(String,String,byte[],AppendModeType)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: concurrentAppend(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.concurrentAppend(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 235
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Appends to the specified file. This method supports multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > concurrentAppend(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append using concurrent append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: appendMode
      type: com.microsoft.azure.management.datalake.store.models._append_mode_type
      description: '<p>Indicates the concurrent append call should create the file if it doesn''t exist or just open the existing file for append. Possible values include: ''autocreate'' </p>'
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.concurrentAppend(String,String,byte[],AppendModeType)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concurrentAppendAsync(String,String,byte[])
  id: concurrentAppendAsync(String,String,byte[])
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: concurrentAppendAsync(String accountName, String filePath, byte[] streamContents)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.concurrentAppendAsync(String accountName, String filePath, byte[] streamContents)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 188
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Appends to the specified file. This method supports multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > concurrentAppendAsync(String accountName, String filePath, byte[] streamContents)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append using concurrent append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concurrentAppendAsync(String,String,byte[],AppendModeType)
  id: concurrentAppendAsync(String,String,byte[],AppendModeType)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 262
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Appends to the specified file. This method supports multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append using concurrent append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: appendMode
      type: com.microsoft.azure.management.datalake.store.models._append_mode_type
      description: '<p>Indicates the concurrent append call should create the file if it doesn''t exist or just open the existing file for append. Possible values include: ''autocreate'' </p>'
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.concurrentAppendAsync(String,String,byte[],AppendModeType)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concurrentAppendAsync(String,String,byte[],AppendModeType,final ServiceCallback< Void >)
  id: concurrentAppendAsync(String,String,byte[],AppendModeType,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 249
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Appends to the specified file. This method supports multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append using concurrent append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: appendMode
      type: com.microsoft.azure.management.datalake.store.models._append_mode_type
      description: '<p>Indicates the concurrent append call should create the file if it doesn''t exist or just open the existing file for append. Possible values include: ''autocreate'' </p>'
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.concurrentAppendAsync(String,String,byte[],AppendModeType,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.concurrentAppendAsync(String,String,byte[],final ServiceCallback< Void >)
  id: concurrentAppendAsync(String,String,byte[],final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 176
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Appends to the specified file. This method supports multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append using concurrent append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.concurrentAppendAsync(String,String,byte[],final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.create(String,String)
  id: create(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: create(String accountName, String directFilePath)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.create(String accountName, String directFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1177
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Creates a file with optionally specified content.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > create(String accountName, String directFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to create. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.create(String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.create(String,String,byte[],Boolean)
  id: create(String,String,byte[],Boolean)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: create(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.create(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1249
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Creates a file with optionally specified content.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > create(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to create. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when creating the file. This parameter is optional, resulting in an empty file if not specified. </p>
    - id: overwrite
      type: 866c2227
      description: <p>The indication of if the file should be overwritten. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.create(String,String,byte[],Boolean)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.createAsync(String,String)
  id: createAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: createAsync(String accountName, String directFilePath)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.createAsync(String accountName, String directFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1200
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Creates a file with optionally specified content.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > createAsync(String accountName, String directFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to create. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.createAsync(String,String,byte[],Boolean)
  id: createAsync(String,String,byte[],Boolean)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: createAsync(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.createAsync(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1276
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Creates a file with optionally specified content.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > createAsync(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to create. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when creating the file. This parameter is optional, resulting in an empty file if not specified. </p>
    - id: overwrite
      type: 866c2227
      description: <p>The indication of if the file should be overwritten. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.createAsync(String,String,byte[],Boolean)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.createAsync(String,String,byte[],Boolean,final ServiceCallback< Void >)
  id: createAsync(String,String,byte[],Boolean,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: createAsync(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.createAsync(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1263
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Creates a file with optionally specified content.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > createAsync(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to create. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when creating the file. This parameter is optional, resulting in an empty file if not specified. </p>
    - id: overwrite
      type: 866c2227
      description: <p>The indication of if the file should be overwritten. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.createAsync(String,String,byte[],Boolean,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.createAsync(String,String,final ServiceCallback< Void >)
  id: createAsync(String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: createAsync(String accountName, String directFilePath, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.createAsync(String accountName, String directFilePath, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1189
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Creates a file with optionally specified content.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > createAsync(String accountName, String directFilePath, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to create. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.createAsync(String,String,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.delete(String,String)
  id: delete(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: delete(String accountName, String filePath)
  fullName: ServiceResponse<FileOperationResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.delete(String accountName, String filePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1763
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Deletes the requested file or directory, optionally recursively.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileOperationResult > delete(String accountName, String filePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to delete. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the FileOperationResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.delete(String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.delete(String,String,Boolean)
  id: delete(String,String,Boolean)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: delete(String accountName, String filePath, Boolean recursive)
  fullName: ServiceResponse<FileOperationResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.delete(String accountName, String filePath, Boolean recursive)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1827
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Deletes the requested file or directory, optionally recursively.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileOperationResult > delete(String accountName, String filePath, Boolean recursive)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>The optional switch indicating if the delete should be recursive </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the FileOperationResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.delete(String,String,Boolean)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.deleteAsync(String,String)
  id: deleteAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: deleteAsync(String accountName, String filePath)
  fullName: Observable<ServiceResponse<FileOperationResult> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.deleteAsync(String accountName, String filePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1786
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Deletes the requested file or directory, optionally recursively.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< FileOperationResult > > deleteAsync(String accountName, String filePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to delete. </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_operation_resultd4c4bc88
      description: <p>the observable to the FileOperationResult object </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.deleteAsync(String,String,Boolean)
  id: deleteAsync(String,String,Boolean)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: deleteAsync(String accountName, String filePath, Boolean recursive)
  fullName: Observable<ServiceResponse<FileOperationResult> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.deleteAsync(String accountName, String filePath, Boolean recursive)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1852
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Deletes the requested file or directory, optionally recursively.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< FileOperationResult > > deleteAsync(String accountName, String filePath, Boolean recursive)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>The optional switch indicating if the delete should be recursive </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_operation_resultd4c4bc88
      description: <p>the observable to the FileOperationResult object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.deleteAsync(String,String,Boolean)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.deleteAsync(String,String,Boolean,final ServiceCallback< FileOperationResult >)
  id: deleteAsync(String,String,Boolean,final ServiceCallback< FileOperationResult >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: deleteAsync(String accountName, String filePath, Boolean recursive, final ServiceCallback< FileOperationResult > serviceCallback)
  fullName: ServiceCall<FileOperationResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.deleteAsync(String accountName, String filePath, Boolean recursive, final ServiceCallback< FileOperationResult > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1840
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Deletes the requested file or directory, optionally recursively.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileOperationResult > deleteAsync(String accountName, String filePath, Boolean recursive, final ServiceCallback< FileOperationResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>The optional switch indicating if the delete should be recursive </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.deleteAsync(String,String,Boolean,final ServiceCallback< FileOperationResult >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.deleteAsync(String,String,final ServiceCallback< FileOperationResult >)
  id: deleteAsync(String,String,final ServiceCallback< FileOperationResult >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: deleteAsync(String accountName, String filePath, final ServiceCallback< FileOperationResult > serviceCallback)
  fullName: ServiceCall<FileOperationResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.deleteAsync(String accountName, String filePath, final ServiceCallback< FileOperationResult > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1775
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Deletes the requested file or directory, optionally recursively.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileOperationResult > deleteAsync(String accountName, String filePath, final ServiceCallback< FileOperationResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to delete. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.deleteAsync(String,String,final ServiceCallback< FileOperationResult >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.FileSystemsImpl(Retrofit,DataLakeStoreFileSystemManagementClientImpl)
  id: FileSystemsImpl(Retrofit,DataLakeStoreFileSystemManagementClientImpl)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: FileSystemsImpl(Retrofit retrofit, DataLakeStoreFileSystemManagementClientImpl client)
  fullName: com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.FileSystemsImpl(Retrofit retrofit, DataLakeStoreFileSystemManagementClientImpl client)
  type: Constructor
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 63
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Initializes an instance of <xref href="com.microsoft.azure.management.datalake.store.implementation._file_systems_impl" data-throw-if-not-resolved="false"></xref>.</p>

    <p></p>
  syntax:
    content: public FileSystemsImpl(Retrofit retrofit, DataLakeStoreFileSystemManagementClientImpl client)
    parameters:
    - id: retrofit
      type: 964879b9
      description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    - id: client
      type: com.microsoft.azure.management.datalake.store.implementation._data_lak9b46a3ddf302c002d128667e4b33a32c
      description: <p>the instance of the service client containing this operation class. </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getAclStatus(String,String)
  id: getAclStatus(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: getAclStatus(String accountName, String aclFilePath)
  fullName: ServiceResponse<AclStatusResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.getAclStatus(String accountName, String aclFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1694
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Gets Access Control List (ACL) entries for the specified file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< AclStatusResult > getAclStatus(String accountName, String aclFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: aclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to get the ACL. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._acl_status_result9ec3e006
      description: <p>the AclStatusResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.getAclStatus(String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getAclStatusAsync(String,String)
  id: getAclStatusAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: getAclStatusAsync(String accountName, String aclFilePath)
  fullName: Observable<ServiceResponse<AclStatusResult> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.getAclStatusAsync(String accountName, String aclFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1717
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Gets Access Control List (ACL) entries for the specified file or directory.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< AclStatusResult > > getAclStatusAsync(String accountName, String aclFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: aclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to get the ACL. </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._acl_status_resultd4c4bc88
      description: <p>the observable to the AclStatusResult object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.getAclStatusAsync(String,String)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getAclStatusAsync(String,String,final ServiceCallback< AclStatusResult >)
  id: getAclStatusAsync(String,String,final ServiceCallback< AclStatusResult >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: getAclStatusAsync(String accountName, String aclFilePath, final ServiceCallback< AclStatusResult > serviceCallback)
  fullName: ServiceCall<AclStatusResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.getAclStatusAsync(String accountName, String aclFilePath, final ServiceCallback< AclStatusResult > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1706
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Gets Access Control List (ACL) entries for the specified file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceCall< AclStatusResult > getAclStatusAsync(String accountName, String aclFilePath, final ServiceCallback< AclStatusResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: aclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to get the ACL. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._acl_status_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._acl_status_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.getAclStatusAsync(String,String,final ServiceCallback< AclStatusResult >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getContentSummary(String,String)
  id: getContentSummary(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: getContentSummary(String accountName, String getContentSummaryFilePath)
  fullName: ServiceResponse<ContentSummaryResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.getContentSummary(String accountName, String getContentSummaryFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 886
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Gets the file content summary object specified by the file path.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< ContentSummaryResult > getContentSummary(String accountName, String getContentSummaryFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: getContentSummaryFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file for which to retrieve the summary. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._content_summary_result9ec3e006
      description: <p>the ContentSummaryResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.getContentSummary(String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getContentSummaryAsync(String,String)
  id: getContentSummaryAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: getContentSummaryAsync(String accountName, String getContentSummaryFilePath)
  fullName: Observable<ServiceResponse<ContentSummaryResult> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.getContentSummaryAsync(String accountName, String getContentSummaryFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 909
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Gets the file content summary object specified by the file path.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< ContentSummaryResult > > getContentSummaryAsync(String accountName, String getContentSummaryFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: getContentSummaryFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file for which to retrieve the summary. </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._content_summary_resultd4c4bc88
      description: <p>the observable to the ContentSummaryResult object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.getContentSummaryAsync(String,String)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getContentSummaryAsync(String,String,final ServiceCallback< ContentSummaryResult >)
  id: getContentSummaryAsync(String,String,final ServiceCallback< ContentSummaryResult >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: getContentSummaryAsync(String accountName, String getContentSummaryFilePath, final ServiceCallback< ContentSummaryResult > serviceCallback)
  fullName: ServiceCall<ContentSummaryResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.getContentSummaryAsync(String accountName, String getContentSummaryFilePath, final ServiceCallback< ContentSummaryResult > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 898
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Gets the file content summary object specified by the file path.</p>

    <p></p>
  syntax:
    content: public ServiceCall< ContentSummaryResult > getContentSummaryAsync(String accountName, String getContentSummaryFilePath, final ServiceCallback< ContentSummaryResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: getContentSummaryFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file for which to retrieve the summary. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._content_summary_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._content_summary_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.getContentSummaryAsync(String,String,final ServiceCallback< ContentSummaryResult >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getFileStatus(String,String)
  id: getFileStatus(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: getFileStatus(String accountName, String getFilePath)
  fullName: ServiceResponse<FileStatusResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.getFileStatus(String accountName, String getFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 955
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Get the file status object specified by the file path.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileStatusResult > getFileStatus(String accountName, String getFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: getFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to retrieve the status. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_status_result9ec3e006
      description: <p>the FileStatusResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.getFileStatus(String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getFileStatusAsync(String,String)
  id: getFileStatusAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: getFileStatusAsync(String accountName, String getFilePath)
  fullName: Observable<ServiceResponse<FileStatusResult> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.getFileStatusAsync(String accountName, String getFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 978
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Get the file status object specified by the file path.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< FileStatusResult > > getFileStatusAsync(String accountName, String getFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: getFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to retrieve the status. </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_status_resultd4c4bc88
      description: <p>the observable to the FileStatusResult object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.getFileStatusAsync(String,String)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.getFileStatusAsync(String,String,final ServiceCallback< FileStatusResult >)
  id: getFileStatusAsync(String,String,final ServiceCallback< FileStatusResult >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: getFileStatusAsync(String accountName, String getFilePath, final ServiceCallback< FileStatusResult > serviceCallback)
  fullName: ServiceCall<FileStatusResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.getFileStatusAsync(String accountName, String getFilePath, final ServiceCallback< FileStatusResult > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 967
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Get the file status object specified by the file path.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileStatusResult > getFileStatusAsync(String accountName, String getFilePath, final ServiceCallback< FileStatusResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: getFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to retrieve the status. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_status_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_status_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.getFileStatusAsync(String,String,final ServiceCallback< FileStatusResult >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.listFileStatus(String,String)
  id: listFileStatus(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: listFileStatus(String accountName, String listFilePath)
  fullName: ServiceResponse<FileStatusesResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.listFileStatus(String accountName, String listFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 743
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Get the list of file status objects specified by the file path, with optional pagination parameters.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileStatusesResult > listFileStatus(String accountName, String listFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: listFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to list. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
      description: <p>the FileStatusesResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.listFileStatus(String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.listFileStatus(String,String,Integer,String,String)
  id: listFileStatus(String,String,Integer,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: listFileStatus(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore)
  fullName: ServiceResponse<FileStatusesResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.listFileStatus(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 811
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Get the list of file status objects specified by the file path, with optional pagination parameters.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileStatusesResult > listFileStatus(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: listFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to list. </p>
    - id: listSize
      type: 08effaa0
      description: <p>Gets or sets the number of items to return. Optional. </p>
    - id: listAfter
      type: "26831127"
      description: <p>Gets or sets the item or lexographical index after which to begin returning results. For example, a file list of 'a','b','d' and listAfter='b' will return 'd', and a listAfter='c' will also return 'd'. Optional. </p>
    - id: listBefore
      type: "26831127"
      description: <p>Gets or sets the item or lexographical index before which to begin returning results. For example, a file list of 'a','b','d' and listBefore='d' will return 'a','b', and a listBefore='c' will also return 'a','b'. Optional. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
      description: <p>the FileStatusesResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.listFileStatus(String,String,Integer,String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.listFileStatusAsync(String,String)
  id: listFileStatusAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: listFileStatusAsync(String accountName, String listFilePath)
  fullName: Observable<ServiceResponse<FileStatusesResult> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.listFileStatusAsync(String accountName, String listFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 766
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Get the list of file status objects specified by the file path, with optional pagination parameters.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< FileStatusesResult > > listFileStatusAsync(String accountName, String listFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: listFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to list. </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_statuses_resultd4c4bc88
      description: <p>the observable to the FileStatusesResult object </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.listFileStatusAsync(String,String,final ServiceCallback< FileStatusesResult >)
  id: listFileStatusAsync(String,String,final ServiceCallback< FileStatusesResult >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: listFileStatusAsync(String accountName, String listFilePath, final ServiceCallback< FileStatusesResult > serviceCallback)
  fullName: ServiceCall<FileStatusesResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.listFileStatusAsync(String accountName, String listFilePath, final ServiceCallback< FileStatusesResult > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 755
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Get the list of file status objects specified by the file path, with optional pagination parameters.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileStatusesResult > listFileStatusAsync(String accountName, String listFilePath, final ServiceCallback< FileStatusesResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: listFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to list. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.listFileStatusAsync(String,String,final ServiceCallback< FileStatusesResult >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.listFileStatusAsync(String,String,Integer,String,String)
  id: listFileStatusAsync(String,String,Integer,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: listFileStatusAsync(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore)
  fullName: Observable<ServiceResponse<FileStatusesResult> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.listFileStatusAsync(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 840
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Get the list of file status objects specified by the file path, with optional pagination parameters.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< FileStatusesResult > > listFileStatusAsync(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: listFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to list. </p>
    - id: listSize
      type: 08effaa0
      description: <p>Gets or sets the number of items to return. Optional. </p>
    - id: listAfter
      type: "26831127"
      description: <p>Gets or sets the item or lexographical index after which to begin returning results. For example, a file list of 'a','b','d' and listAfter='b' will return 'd', and a listAfter='c' will also return 'd'. Optional. </p>
    - id: listBefore
      type: "26831127"
      description: <p>Gets or sets the item or lexographical index before which to begin returning results. For example, a file list of 'a','b','d' and listBefore='d' will return 'a','b', and a listBefore='c' will also return 'a','b'. Optional. </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_statuses_resultd4c4bc88
      description: <p>the observable to the FileStatusesResult object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.listFileStatusAsync(String,String,Integer,String,String)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.listFileStatusAsync(String,String,Integer,String,String,final ServiceCallback< FileStatusesResult >)
  id: listFileStatusAsync(String,String,Integer,String,String,final ServiceCallback< FileStatusesResult >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: listFileStatusAsync(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore, final ServiceCallback< FileStatusesResult > serviceCallback)
  fullName: ServiceCall<FileStatusesResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.listFileStatusAsync(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore, final ServiceCallback< FileStatusesResult > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 826
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Get the list of file status objects specified by the file path, with optional pagination parameters.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileStatusesResult > listFileStatusAsync(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore, final ServiceCallback< FileStatusesResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: listFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to list. </p>
    - id: listSize
      type: 08effaa0
      description: <p>Gets or sets the number of items to return. Optional. </p>
    - id: listAfter
      type: "26831127"
      description: <p>Gets or sets the item or lexographical index after which to begin returning results. For example, a file list of 'a','b','d' and listAfter='b' will return 'd', and a listAfter='c' will also return 'd'. Optional. </p>
    - id: listBefore
      type: "26831127"
      description: <p>Gets or sets the item or lexographical index before which to begin returning results. For example, a file list of 'a','b','d' and listBefore='d' will return 'a','b', and a listBefore='c' will also return 'a','b'. Optional. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.listFileStatusAsync(String,String,Integer,String,String,final ServiceCallback< FileStatusesResult >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.mkdirs(String,String)
  id: mkdirs(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: mkdirs(String accountName, String path)
  fullName: ServiceResponse<FileOperationResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.mkdirs(String accountName, String path)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 448
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Creates a directory.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileOperationResult > mkdirs(String accountName, String path)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to create. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the FileOperationResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.mkdirs(String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.mkdirsAsync(String,String)
  id: mkdirsAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: mkdirsAsync(String accountName, String path)
  fullName: Observable<ServiceResponse<FileOperationResult> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.mkdirsAsync(String accountName, String path)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 471
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Creates a directory.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< FileOperationResult > > mkdirsAsync(String accountName, String path)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to create. </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_operation_resultd4c4bc88
      description: <p>the observable to the FileOperationResult object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.mkdirsAsync(String,String)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.mkdirsAsync(String,String,final ServiceCallback< FileOperationResult >)
  id: mkdirsAsync(String,String,final ServiceCallback< FileOperationResult >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: mkdirsAsync(String accountName, String path, final ServiceCallback< FileOperationResult > serviceCallback)
  fullName: ServiceCall<FileOperationResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.mkdirsAsync(String accountName, String path, final ServiceCallback< FileOperationResult > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 460
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Creates a directory.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileOperationResult > mkdirsAsync(String accountName, String path, final ServiceCallback< FileOperationResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to create. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.mkdirsAsync(String,String,final ServiceCallback< FileOperationResult >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.modifyAclEntries(String,String,String)
  id: modifyAclEntries(String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: modifyAclEntries(String accountName, String modifyAclFilePath, String aclspec)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.modifyAclEntries(String accountName, String modifyAclFilePath, String aclspec)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1545
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Modifies existing Access Control List (ACL) entries on a file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > modifyAclEntries(String accountName, String modifyAclFilePath, String aclspec)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: modifyAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory with the ACL being modified. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL specification included in ACL modification operations in the format '[default:]user|group|other::r|-w|-x|-' </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.modifyAclEntries(String,String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.modifyAclEntriesAsync(String,String,String)
  id: modifyAclEntriesAsync(String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: modifyAclEntriesAsync(String accountName, String modifyAclFilePath, String aclspec)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.modifyAclEntriesAsync(String accountName, String modifyAclFilePath, String aclspec)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1570
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Modifies existing Access Control List (ACL) entries on a file or folder.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > modifyAclEntriesAsync(String accountName, String modifyAclFilePath, String aclspec)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: modifyAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory with the ACL being modified. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL specification included in ACL modification operations in the format '[default:]user|group|other::r|-w|-x|-' </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.modifyAclEntriesAsync(String,String,String)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.modifyAclEntriesAsync(String,String,String,final ServiceCallback< Void >)
  id: modifyAclEntriesAsync(String,String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: modifyAclEntriesAsync(String accountName, String modifyAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.modifyAclEntriesAsync(String accountName, String modifyAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1558
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Modifies existing Access Control List (ACL) entries on a file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > modifyAclEntriesAsync(String accountName, String modifyAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: modifyAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory with the ACL being modified. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL specification included in ACL modification operations in the format '[default:]user|group|other::r|-w|-x|-' </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.modifyAclEntriesAsync(String,String,String,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.msConcat(String,String,byte[])
  id: msConcat(String,String,byte[])
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: msConcat(String accountName, String msConcatDestinationPath, byte[] streamContents)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.msConcat(String accountName, String msConcatDestinationPath, byte[] streamContents)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 595
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > msConcat(String accountName, String msConcatDestinationPath, byte[] streamContents)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: msConcatDestinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: streamContents
      type: bc819c2f
      description: '<p>A list of Data Lake Store paths (starting with ''/'') of the source files. Must be in the format: sources=&lt;comma separated list&gt; </p>'
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.msConcat(String,String,byte[])
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.msConcat(String,String,byte[],Boolean)
  id: msConcat(String,String,byte[],Boolean)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: msConcat(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.msConcat(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 666
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > msConcat(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: msConcatDestinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: streamContents
      type: bc819c2f
      description: '<p>A list of Data Lake Store paths (starting with ''/'') of the source files. Must be in the format: sources=&lt;comma separated list&gt; </p>'
    - id: deleteSourceDirectory
      type: 866c2227
      description: '<p>Indicates that as an optimization instead of deleting each individual source stream, delete the source stream folder if all streams are in the same folder instead. This results in a substantial performance improvement when the only streams in the folder are part of the concatenation operation. WARNING: This includes the deletion of any other files that are not source files. Only set this to true when source files are the only files in the source directory. </p>'
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.msConcat(String,String,byte[],Boolean)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.msConcatAsync(String,String,byte[])
  id: msConcatAsync(String,String,byte[])
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 620
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: msConcatDestinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: streamContents
      type: bc819c2f
      description: '<p>A list of Data Lake Store paths (starting with ''/'') of the source files. Must be in the format: sources=&lt;comma separated list&gt; </p>'
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.msConcatAsync(String,String,byte[],Boolean)
  id: msConcatAsync(String,String,byte[],Boolean)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 693
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: msConcatDestinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: streamContents
      type: bc819c2f
      description: '<p>A list of Data Lake Store paths (starting with ''/'') of the source files. Must be in the format: sources=&lt;comma separated list&gt; </p>'
    - id: deleteSourceDirectory
      type: 866c2227
      description: '<p>Indicates that as an optimization instead of deleting each individual source stream, delete the source stream folder if all streams are in the same folder instead. This results in a substantial performance improvement when the only streams in the folder are part of the concatenation operation. WARNING: This includes the deletion of any other files that are not source files. Only set this to true when source files are the only files in the source directory. </p>'
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.msConcatAsync(String,String,byte[],Boolean)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.msConcatAsync(String,String,byte[],Boolean,final ServiceCallback< Void >)
  id: msConcatAsync(String,String,byte[],Boolean,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 680
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: msConcatDestinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: streamContents
      type: bc819c2f
      description: '<p>A list of Data Lake Store paths (starting with ''/'') of the source files. Must be in the format: sources=&lt;comma separated list&gt; </p>'
    - id: deleteSourceDirectory
      type: 866c2227
      description: '<p>Indicates that as an optimization instead of deleting each individual source stream, delete the source stream folder if all streams are in the same folder instead. This results in a substantial performance improvement when the only streams in the folder are part of the concatenation operation. WARNING: This includes the deletion of any other files that are not source files. Only set this to true when source files are the only files in the source directory. </p>'
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.msConcatAsync(String,String,byte[],Boolean,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.msConcatAsync(String,String,byte[],final ServiceCallback< Void >)
  id: msConcatAsync(String,String,byte[],final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 608
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: msConcatDestinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: streamContents
      type: bc819c2f
      description: '<p>A list of Data Lake Store paths (starting with ''/'') of the source files. Must be in the format: sources=&lt;comma separated list&gt; </p>'
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.msConcatAsync(String,String,byte[],final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.open(String,String)
  id: open(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: open(String accountName, String directFilePath)
  fullName: ServiceResponse<InputStream> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.open(String accountName, String directFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1328
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Opens and reads from the specified file.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< InputStream > open(String accountName, String directFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to open. </p>
    return:
      type: 272c41a6
      description: <p>the InputStream object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.open(String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.open(String,String,Long,Long)
  id: open(String,String,Long,Long)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: open(String accountName, String directFilePath, Long length, Long offset)
  fullName: ServiceResponse<InputStream> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.open(String accountName, String directFilePath, Long length, Long offset)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1395
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Opens and reads from the specified file.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< InputStream > open(String accountName, String directFilePath, Long length, Long offset)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to open. </p>
    - id: length
      type: 34f09483
      description: <p>the Long value </p>
    - id: offset
      type: 34f09483
      description: <p>the Long value </p>
    return:
      type: 272c41a6
      description: <p>the InputStream object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.open(String,String,Long,Long)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.openAsync(String,String)
  id: openAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: openAsync(String accountName, String directFilePath)
  fullName: Observable<ServiceResponse<InputStream> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.openAsync(String accountName, String directFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1351
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Opens and reads from the specified file.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< InputStream > > openAsync(String accountName, String directFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to open. </p>
    return:
      type: 276aebb0
      description: <p>the observable to the InputStream object </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.openAsync(String,String,final ServiceCallback< InputStream >)
  id: openAsync(String,String,final ServiceCallback< InputStream >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: openAsync(String accountName, String directFilePath, final ServiceCallback< InputStream > serviceCallback)
  fullName: ServiceCall<InputStream> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.openAsync(String accountName, String directFilePath, final ServiceCallback< InputStream > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1340
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Opens and reads from the specified file.</p>

    <p></p>
  syntax:
    content: public ServiceCall< InputStream > openAsync(String accountName, String directFilePath, final ServiceCallback< InputStream > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to open. </p>
    - id: serviceCallback
      type: 647f35a4
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 47bfbe0f
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.openAsync(String,String,final ServiceCallback< InputStream >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.openAsync(String,String,Long,Long)
  id: openAsync(String,String,Long,Long)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: openAsync(String accountName, String directFilePath, Long length, Long offset)
  fullName: Observable<ServiceResponse<InputStream> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.openAsync(String accountName, String directFilePath, Long length, Long offset)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1422
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Opens and reads from the specified file.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< InputStream > > openAsync(String accountName, String directFilePath, Long length, Long offset)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to open. </p>
    - id: length
      type: 34f09483
      description: <p>the Long value </p>
    - id: offset
      type: 34f09483
      description: <p>the Long value </p>
    return:
      type: 276aebb0
      description: <p>the observable to the InputStream object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.openAsync(String,String,Long,Long)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.openAsync(String,String,Long,Long,final ServiceCallback< InputStream >)
  id: openAsync(String,String,Long,Long,final ServiceCallback< InputStream >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: openAsync(String accountName, String directFilePath, Long length, Long offset, final ServiceCallback< InputStream > serviceCallback)
  fullName: ServiceCall<InputStream> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.openAsync(String accountName, String directFilePath, Long length, Long offset, final ServiceCallback< InputStream > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1409
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Opens and reads from the specified file.</p>

    <p></p>
  syntax:
    content: public ServiceCall< InputStream > openAsync(String accountName, String directFilePath, Long length, Long offset, final ServiceCallback< InputStream > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to open. </p>
    - id: length
      type: 34f09483
      description: <p>the Long value </p>
    - id: offset
      type: 34f09483
      description: <p>the Long value </p>
    - id: serviceCallback
      type: 647f35a4
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 47bfbe0f
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.openAsync(String,String,Long,Long,final ServiceCallback< InputStream >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.removeAclEntries(String,String,String)
  id: removeAclEntries(String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: removeAclEntries(String accountName, String removeAclFilePath, String aclspec)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.removeAclEntries(String accountName, String removeAclFilePath, String aclspec)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1620
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Removes existing Access Control List (ACL) entries for a file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > removeAclEntries(String accountName, String removeAclFilePath, String aclspec)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: removeAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL spec included in ACL removal operations in the format '[default:]user|group|other' </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.removeAclEntries(String,String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.removeAclEntriesAsync(String,String,String)
  id: removeAclEntriesAsync(String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: removeAclEntriesAsync(String accountName, String removeAclFilePath, String aclspec)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.removeAclEntriesAsync(String accountName, String removeAclFilePath, String aclspec)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1645
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Removes existing Access Control List (ACL) entries for a file or folder.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > removeAclEntriesAsync(String accountName, String removeAclFilePath, String aclspec)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: removeAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL spec included in ACL removal operations in the format '[default:]user|group|other' </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.removeAclEntriesAsync(String,String,String)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.removeAclEntriesAsync(String,String,String,final ServiceCallback< Void >)
  id: removeAclEntriesAsync(String,String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: removeAclEntriesAsync(String accountName, String removeAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.removeAclEntriesAsync(String accountName, String removeAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1633
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Removes existing Access Control List (ACL) entries for a file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > removeAclEntriesAsync(String accountName, String removeAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: removeAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL spec included in ACL removal operations in the format '[default:]user|group|other' </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.removeAclEntriesAsync(String,String,String,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.rename(String,String,String)
  id: rename(String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: rename(String accountName, String renameFilePath, String destination)
  fullName: ServiceResponse<FileOperationResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.rename(String accountName, String renameFilePath, String destination)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1899
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Rename a file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileOperationResult > rename(String accountName, String renameFilePath, String destination)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: renameFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to move/rename. </p>
    - id: destination
      type: "26831127"
      description: <p>The path to move/rename the file or folder to </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the FileOperationResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.rename(String,String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.renameAsync(String,String,String)
  id: renameAsync(String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: renameAsync(String accountName, String renameFilePath, String destination)
  fullName: Observable<ServiceResponse<FileOperationResult> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.renameAsync(String accountName, String renameFilePath, String destination)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1924
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Rename a file or directory.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< FileOperationResult > > renameAsync(String accountName, String renameFilePath, String destination)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: renameFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to move/rename. </p>
    - id: destination
      type: "26831127"
      description: <p>The path to move/rename the file or folder to </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_operation_resultd4c4bc88
      description: <p>the observable to the FileOperationResult object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.renameAsync(String,String,String)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.renameAsync(String,String,String,final ServiceCallback< FileOperationResult >)
  id: renameAsync(String,String,String,final ServiceCallback< FileOperationResult >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: renameAsync(String accountName, String renameFilePath, String destination, final ServiceCallback< FileOperationResult > serviceCallback)
  fullName: ServiceCall<FileOperationResult> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.renameAsync(String accountName, String renameFilePath, String destination, final ServiceCallback< FileOperationResult > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1912
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Rename a file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileOperationResult > renameAsync(String accountName, String renameFilePath, String destination, final ServiceCallback< FileOperationResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: renameFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to move/rename. </p>
    - id: destination
      type: "26831127"
      description: <p>The path to move/rename the file or folder to </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.renameAsync(String,String,String,final ServiceCallback< FileOperationResult >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setAcl(String,String,String)
  id: setAcl(String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setAcl(String accountName, String setAclFilePath, String aclspec)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setAcl(String accountName, String setAclFilePath, String aclspec)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1470
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the Access Control List (ACL) for a file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > setAcl(String accountName, String setAclFilePath, String aclspec)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory on which to set the ACL. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL spec included in ACL creation operations in the format '[default:]user|group|other::r|-w|-x|-' </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.setAcl(String,String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setAclAsync(String,String,String)
  id: setAclAsync(String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setAclAsync(String accountName, String setAclFilePath, String aclspec)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setAclAsync(String accountName, String setAclFilePath, String aclspec)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1495
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the Access Control List (ACL) for a file or folder.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > setAclAsync(String accountName, String setAclFilePath, String aclspec)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory on which to set the ACL. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL spec included in ACL creation operations in the format '[default:]user|group|other::r|-w|-x|-' </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.setAclAsync(String,String,String)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setAclAsync(String,String,String,final ServiceCallback< Void >)
  id: setAclAsync(String,String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setAclAsync(String accountName, String setAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setAclAsync(String accountName, String setAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1483
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the Access Control List (ACL) for a file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > setAclAsync(String accountName, String setAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory on which to set the ACL. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL spec included in ACL creation operations in the format '[default:]user|group|other::r|-w|-x|-' </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.setAclAsync(String,String,String,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setOwner(String,String)
  id: setOwner(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setOwner(String accountName, String setOwnerFilePath)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setOwner(String accountName, String setOwnerFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1973
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the owner of a file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > setOwner(String accountName, String setOwnerFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setOwnerFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the owner. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.setOwner(String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setOwner(String,String,String,String)
  id: setOwner(String,String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setOwner(String accountName, String setOwnerFilePath, String owner, String group)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setOwner(String accountName, String setOwnerFilePath, String owner, String group)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 2039
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the owner of a file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > setOwner(String accountName, String setOwnerFilePath, String owner, String group)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setOwnerFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the owner. </p>
    - id: owner
      type: "26831127"
      description: <p>The AAD Object ID of the user owner of the file or directory. If empty, the property will remain unchanged. </p>
    - id: group
      type: "26831127"
      description: <p>The AAD Object ID of the group owner of the file or directory. If empty, the property will remain unchanged. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.setOwner(String,String,String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setOwnerAsync(String,String)
  id: setOwnerAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setOwnerAsync(String accountName, String setOwnerFilePath)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setOwnerAsync(String accountName, String setOwnerFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1996
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the owner of a file or directory.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > setOwnerAsync(String accountName, String setOwnerFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setOwnerFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the owner. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setOwnerAsync(String,String,final ServiceCallback< Void >)
  id: setOwnerAsync(String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setOwnerAsync(String accountName, String setOwnerFilePath, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setOwnerAsync(String accountName, String setOwnerFilePath, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 1985
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the owner of a file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > setOwnerAsync(String accountName, String setOwnerFilePath, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setOwnerFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the owner. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.setOwnerAsync(String,String,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setOwnerAsync(String,String,String,String)
  id: setOwnerAsync(String,String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setOwnerAsync(String accountName, String setOwnerFilePath, String owner, String group)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setOwnerAsync(String accountName, String setOwnerFilePath, String owner, String group)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 2066
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the owner of a file or directory.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > setOwnerAsync(String accountName, String setOwnerFilePath, String owner, String group)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setOwnerFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the owner. </p>
    - id: owner
      type: "26831127"
      description: <p>The AAD Object ID of the user owner of the file or directory. If empty, the property will remain unchanged. </p>
    - id: group
      type: "26831127"
      description: <p>The AAD Object ID of the group owner of the file or directory. If empty, the property will remain unchanged. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.setOwnerAsync(String,String,String,String)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setOwnerAsync(String,String,String,String,final ServiceCallback< Void >)
  id: setOwnerAsync(String,String,String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setOwnerAsync(String accountName, String setOwnerFilePath, String owner, String group, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setOwnerAsync(String accountName, String setOwnerFilePath, String owner, String group, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 2053
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the owner of a file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > setOwnerAsync(String accountName, String setOwnerFilePath, String owner, String group, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setOwnerFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the owner. </p>
    - id: owner
      type: "26831127"
      description: <p>The AAD Object ID of the user owner of the file or directory. If empty, the property will remain unchanged. </p>
    - id: group
      type: "26831127"
      description: <p>The AAD Object ID of the group owner of the file or directory. If empty, the property will remain unchanged. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.setOwnerAsync(String,String,String,String,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setPermission(String,String)
  id: setPermission(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setPermission(String accountName, String setPermissionFilePath)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setPermission(String accountName, String setPermissionFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 2112
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the permission of the file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > setPermission(String accountName, String setPermissionFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setPermissionFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the permission. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.setPermission(String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setPermission(String,String,String)
  id: setPermission(String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setPermission(String accountName, String setPermissionFilePath, String permission)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setPermission(String accountName, String setPermissionFilePath, String permission)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 2176
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the permission of the file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > setPermission(String accountName, String setPermissionFilePath, String permission)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setPermissionFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the permission. </p>
    - id: permission
      type: "26831127"
      description: <p>A string representation of the permission (i.e 'rwx'). If empty, this property remains unchanged. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.setPermission(String,String,String)
  exceptions:
  - type: "24876076"
    description: <p>exception thrown from REST call </p>
  - type: cbf33bbe
    description: <p>exception thrown from serialization/deserialization </p>
  - type: 3c87bd19
    description: <p>exception thrown from invalid parameters </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setPermissionAsync(String,String)
  id: setPermissionAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setPermissionAsync(String accountName, String setPermissionFilePath)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setPermissionAsync(String accountName, String setPermissionFilePath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 2135
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the permission of the file or folder.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > setPermissionAsync(String accountName, String setPermissionFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setPermissionFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the permission. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setPermissionAsync(String,String,final ServiceCallback< Void >)
  id: setPermissionAsync(String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setPermissionAsync(String accountName, String setPermissionFilePath, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setPermissionAsync(String accountName, String setPermissionFilePath, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 2124
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the permission of the file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > setPermissionAsync(String accountName, String setPermissionFilePath, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setPermissionFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the permission. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.setPermissionAsync(String,String,final ServiceCallback< Void >)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setPermissionAsync(String,String,String)
  id: setPermissionAsync(String,String,String)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setPermissionAsync(String accountName, String setPermissionFilePath, String permission)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setPermissionAsync(String accountName, String setPermissionFilePath, String permission)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 2201
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the permission of the file or folder.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > setPermissionAsync(String accountName, String setPermissionFilePath, String permission)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setPermissionFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the permission. </p>
    - id: permission
      type: "26831127"
      description: <p>A string representation of the permission (i.e 'rwx'). If empty, this property remains unchanged. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.setPermissionAsync(String,String,String)
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.setPermissionAsync(String,String,String,final ServiceCallback< Void >)
  id: setPermissionAsync(String,String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  langs:
  - java
  name: setPermissionAsync(String accountName, String setPermissionFilePath, String permission, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl.setPermissionAsync(String accountName, String setPermissionFilePath, String permission, final ServiceCallback< Void > serviceCallback)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store/src/main/java/com/microsoft/azure/management/datalake/store/implementation/FileSystemsImpl.java
    startLine: 2189
  package: com.microsoft.azure.management.datalake.store.implementation
  summary: >-
    <p>Sets the permission of the file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > setPermissionAsync(String accountName, String setPermissionFilePath, String permission, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setPermissionFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the permission. </p>
    - id: permission
      type: "26831127"
      description: <p>A string representation of the permission (i.e 'rwx'). If empty, this property remains unchanged. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
  overridden: com.microsoft.azure.management.datalake.store._file_systems.setPermissionAsync(String,String,String,final ServiceCallback< Void >)
references:
- uid: 964879b9
  spec.java:
  - name: Retrofit
    fullName: Retrofit
- uid: "24876076"
  spec.java:
  - name: AdlsErrorException
    fullName: AdlsErrorException
- uid: cbf33bbe
  spec.java:
  - name: IOException
    fullName: IOException
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: bc819c2f
  spec.java:
  - name: byte[]
    fullName: byte[]
- uid: 4379c115
  spec.java:
  - name: ServiceResponse< Void >
    fullName: ServiceResponse< Void >
- uid: e53fb623
  spec.java:
  - name: final ServiceCallback< Void >
    fullName: final ServiceCallback< Void >
- uid: "85152549"
  spec.java:
  - name: ServiceCall< Void >
    fullName: ServiceCall< Void >
- uid: 450f15bc
  spec.java:
  - name: Observable< ServiceResponse< Void > >
    fullName: Observable< ServiceResponse< Void > >
- uid: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
  spec.java:
  - name: 'ServiceResponse< '
    fullName: 'ServiceResponse< '
  - uid: com.microsoft.azure.management.datalake.store.models._file_operation_result
    name: FileOperationResult
    fullName: com.microsoft.azure.management.datalake.store.models.FileOperationResult
    href: com.microsoft.azure.management.datalake.store.models._file_operation_result.yml
  - name: " >"
    fullName: " >"
- uid: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
  spec.java:
  - name: 'final ServiceCallback< '
    fullName: 'final ServiceCallback< '
  - uid: com.microsoft.azure.management.datalake.store.models._file_operation_result
    name: FileOperationResult
    fullName: com.microsoft.azure.management.datalake.store.models.FileOperationResult
    href: com.microsoft.azure.management.datalake.store.models._file_operation_result.yml
  - name: " >"
    fullName: " >"
- uid: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
  spec.java:
  - name: 'ServiceCall< '
    fullName: 'ServiceCall< '
  - uid: com.microsoft.azure.management.datalake.store.models._file_operation_result
    name: FileOperationResult
    fullName: com.microsoft.azure.management.datalake.store.models.FileOperationResult
    href: com.microsoft.azure.management.datalake.store.models._file_operation_result.yml
  - name: " >"
    fullName: " >"
- uid: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_operation_resultd4c4bc88
  spec.java:
  - name: 'Observable< ServiceResponse< '
    fullName: 'Observable< ServiceResponse< '
  - uid: com.microsoft.azure.management.datalake.store.models._file_operation_result
    name: FileOperationResult
    fullName: com.microsoft.azure.management.datalake.store.models.FileOperationResult
    href: com.microsoft.azure.management.datalake.store.models._file_operation_result.yml
  - name: " > >"
    fullName: " > >"
- uid: f35af49b
  spec.java:
  - name: List< String >
    fullName: List< String >
- uid: 866c2227
  spec.java:
  - name: Boolean
    fullName: Boolean
- uid: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
  spec.java:
  - name: 'ServiceResponse< '
    fullName: 'ServiceResponse< '
  - uid: com.microsoft.azure.management.datalake.store.models._file_statuses_result
    name: FileStatusesResult
    fullName: com.microsoft.azure.management.datalake.store.models.FileStatusesResult
    href: com.microsoft.azure.management.datalake.store.models._file_statuses_result.yml
  - name: " >"
    fullName: " >"
- uid: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
  spec.java:
  - name: 'final ServiceCallback< '
    fullName: 'final ServiceCallback< '
  - uid: com.microsoft.azure.management.datalake.store.models._file_statuses_result
    name: FileStatusesResult
    fullName: com.microsoft.azure.management.datalake.store.models.FileStatusesResult
    href: com.microsoft.azure.management.datalake.store.models._file_statuses_result.yml
  - name: " >"
    fullName: " >"
- uid: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
  spec.java:
  - name: 'ServiceCall< '
    fullName: 'ServiceCall< '
  - uid: com.microsoft.azure.management.datalake.store.models._file_statuses_result
    name: FileStatusesResult
    fullName: com.microsoft.azure.management.datalake.store.models.FileStatusesResult
    href: com.microsoft.azure.management.datalake.store.models._file_statuses_result.yml
  - name: " >"
    fullName: " >"
- uid: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_statuses_resultd4c4bc88
  spec.java:
  - name: 'Observable< ServiceResponse< '
    fullName: 'Observable< ServiceResponse< '
  - uid: com.microsoft.azure.management.datalake.store.models._file_statuses_result
    name: FileStatusesResult
    fullName: com.microsoft.azure.management.datalake.store.models.FileStatusesResult
    href: com.microsoft.azure.management.datalake.store.models._file_statuses_result.yml
  - name: " > >"
    fullName: " > >"
- uid: 08effaa0
  spec.java:
  - name: Integer
    fullName: Integer
- uid: 115bb2cccom.microsoft.azure.management.datalake.store.models._content_summary_result9ec3e006
  spec.java:
  - name: 'ServiceResponse< '
    fullName: 'ServiceResponse< '
  - uid: com.microsoft.azure.management.datalake.store.models._content_summary_result
    name: ContentSummaryResult
    fullName: com.microsoft.azure.management.datalake.store.models.ContentSummaryResult
    href: com.microsoft.azure.management.datalake.store.models._content_summary_result.yml
  - name: " >"
    fullName: " >"
- uid: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._content_summary_result9ec3e006
  spec.java:
  - name: 'final ServiceCallback< '
    fullName: 'final ServiceCallback< '
  - uid: com.microsoft.azure.management.datalake.store.models._content_summary_result
    name: ContentSummaryResult
    fullName: com.microsoft.azure.management.datalake.store.models.ContentSummaryResult
    href: com.microsoft.azure.management.datalake.store.models._content_summary_result.yml
  - name: " >"
    fullName: " >"
- uid: 9e4c5505com.microsoft.azure.management.datalake.store.models._content_summary_result9ec3e006
  spec.java:
  - name: 'ServiceCall< '
    fullName: 'ServiceCall< '
  - uid: com.microsoft.azure.management.datalake.store.models._content_summary_result
    name: ContentSummaryResult
    fullName: com.microsoft.azure.management.datalake.store.models.ContentSummaryResult
    href: com.microsoft.azure.management.datalake.store.models._content_summary_result.yml
  - name: " >"
    fullName: " >"
- uid: cbaf8b21com.microsoft.azure.management.datalake.store.models._content_summary_resultd4c4bc88
  spec.java:
  - name: 'Observable< ServiceResponse< '
    fullName: 'Observable< ServiceResponse< '
  - uid: com.microsoft.azure.management.datalake.store.models._content_summary_result
    name: ContentSummaryResult
    fullName: com.microsoft.azure.management.datalake.store.models.ContentSummaryResult
    href: com.microsoft.azure.management.datalake.store.models._content_summary_result.yml
  - name: " > >"
    fullName: " > >"
- uid: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_status_result9ec3e006
  spec.java:
  - name: 'ServiceResponse< '
    fullName: 'ServiceResponse< '
  - uid: com.microsoft.azure.management.datalake.store.models._file_status_result
    name: FileStatusResult
    fullName: com.microsoft.azure.management.datalake.store.models.FileStatusResult
    href: com.microsoft.azure.management.datalake.store.models._file_status_result.yml
  - name: " >"
    fullName: " >"
- uid: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_status_result9ec3e006
  spec.java:
  - name: 'final ServiceCallback< '
    fullName: 'final ServiceCallback< '
  - uid: com.microsoft.azure.management.datalake.store.models._file_status_result
    name: FileStatusResult
    fullName: com.microsoft.azure.management.datalake.store.models.FileStatusResult
    href: com.microsoft.azure.management.datalake.store.models._file_status_result.yml
  - name: " >"
    fullName: " >"
- uid: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_status_result9ec3e006
  spec.java:
  - name: 'ServiceCall< '
    fullName: 'ServiceCall< '
  - uid: com.microsoft.azure.management.datalake.store.models._file_status_result
    name: FileStatusResult
    fullName: com.microsoft.azure.management.datalake.store.models.FileStatusResult
    href: com.microsoft.azure.management.datalake.store.models._file_status_result.yml
  - name: " >"
    fullName: " >"
- uid: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_status_resultd4c4bc88
  spec.java:
  - name: 'Observable< ServiceResponse< '
    fullName: 'Observable< ServiceResponse< '
  - uid: com.microsoft.azure.management.datalake.store.models._file_status_result
    name: FileStatusResult
    fullName: com.microsoft.azure.management.datalake.store.models.FileStatusResult
    href: com.microsoft.azure.management.datalake.store.models._file_status_result.yml
  - name: " > >"
    fullName: " > >"
- uid: 34f09483
  spec.java:
  - name: Long
    fullName: Long
- uid: 272c41a6
  spec.java:
  - name: ServiceResponse< InputStream >
    fullName: ServiceResponse< InputStream >
- uid: 647f35a4
  spec.java:
  - name: final ServiceCallback< InputStream >
    fullName: final ServiceCallback< InputStream >
- uid: 47bfbe0f
  spec.java:
  - name: ServiceCall< InputStream >
    fullName: ServiceCall< InputStream >
- uid: 276aebb0
  spec.java:
  - name: Observable< ServiceResponse< InputStream > >
    fullName: Observable< ServiceResponse< InputStream > >
- uid: 115bb2cccom.microsoft.azure.management.datalake.store.models._acl_status_result9ec3e006
  spec.java:
  - name: 'ServiceResponse< '
    fullName: 'ServiceResponse< '
  - uid: com.microsoft.azure.management.datalake.store.models._acl_status_result
    name: AclStatusResult
    fullName: com.microsoft.azure.management.datalake.store.models.AclStatusResult
    href: com.microsoft.azure.management.datalake.store.models._acl_status_result.yml
  - name: " >"
    fullName: " >"
- uid: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._acl_status_result9ec3e006
  spec.java:
  - name: 'final ServiceCallback< '
    fullName: 'final ServiceCallback< '
  - uid: com.microsoft.azure.management.datalake.store.models._acl_status_result
    name: AclStatusResult
    fullName: com.microsoft.azure.management.datalake.store.models.AclStatusResult
    href: com.microsoft.azure.management.datalake.store.models._acl_status_result.yml
  - name: " >"
    fullName: " >"
- uid: 9e4c5505com.microsoft.azure.management.datalake.store.models._acl_status_result9ec3e006
  spec.java:
  - name: 'ServiceCall< '
    fullName: 'ServiceCall< '
  - uid: com.microsoft.azure.management.datalake.store.models._acl_status_result
    name: AclStatusResult
    fullName: com.microsoft.azure.management.datalake.store.models.AclStatusResult
    href: com.microsoft.azure.management.datalake.store.models._acl_status_result.yml
  - name: " >"
    fullName: " >"
- uid: cbaf8b21com.microsoft.azure.management.datalake.store.models._acl_status_resultd4c4bc88
  spec.java:
  - name: 'Observable< ServiceResponse< '
    fullName: 'Observable< ServiceResponse< '
  - uid: com.microsoft.azure.management.datalake.store.models._acl_status_result
    name: AclStatusResult
    fullName: com.microsoft.azure.management.datalake.store.models.AclStatusResult
    href: com.microsoft.azure.management.datalake.store.models._acl_status_result.yml
  - name: " > >"
    fullName: " > >"
- uid: com.microsoft.azure.management.datalake.store._file_systems
  parent: com.microsoft.azure.management.datalake.store
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: FileSystems
  fullName: com.microsoft.azure.management.datalake.store.FileSystems
  type: Interface
  summary: <p>An instance of this class provides access to all the operations defined in <xref href="com.microsoft.azure.management.datalake.store._file_systems" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public interface FileSystems
- uid: com.microsoft.azure.management.datalake.store.implementation._data_lak9b46a3ddf302c002d128667e4b33a32c
  parent: com.microsoft.azure.management.datalake.store.implementation
  href: com.microsoft.azure.management.datalake.store.implementation._data_lak9b46a3ddf302c002d128667e4b33a32c.yml
  name: DataLakeStoreFileSystemManagementClientImpl
  fullName: com.microsoft.azure.management.datalake.store.implementation.DataLakeStoreFileSystemManagementClientImpl
  type: Class
  summary: <p>Initializes a new instance of the <xref href="com.microsoft.azure.management.datalake.store.implementation._data_lak9b46a3ddf302c002d128667e4b33a32c" data-throw-if-not-resolved="false"></xref> class. </p>
  syntax:
    content: public class DataLakeStoreFileSystemManagementClientImpl implements DataLakeStoreFileSystemManagementClient
- uid: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl
  parent: com.microsoft.azure.management.datalake.store.implementation
  href: com.microsoft.azure.management.datalake.store.implementation._file_systems_impl.yml
  name: FileSystemsImpl
  fullName: com.microsoft.azure.management.datalake.store.implementation.FileSystemsImpl
  type: Class
  summary: <p>An instance of this class provides access to all the operations defined in <xref href="com.microsoft.azure.management.datalake.store._file_systems" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: *o1
- uid: com.microsoft.azure.management.datalake.store._file_systems.concurrentAppend(String,String,byte[])
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: concurrentAppend(String accountName, String filePath, byte[] streamContents)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.concurrentAppend(String accountName, String filePath, byte[] streamContents)
  type: Method
  summary: >-
    <p>Appends to the specified file. This method supports multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > concurrentAppend(String accountName, String filePath, byte[] streamContents)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append using concurrent append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store.models._adls_error_exception
  parent: com.microsoft.azure.management.datalake.store.models
  href: com.microsoft.azure.management.datalake.store.models._adls_error_exception.yml
  name: AdlsErrorException
  fullName: com.microsoft.azure.management.datalake.store.models.AdlsErrorException
  type: Class
  summary: <p>Exception thrown for an invalid response with <xref href="com.microsoft.azure.management.datalake.store.models._adls_error" data-throw-if-not-resolved="false"></xref> information. </p>
  syntax:
    content: public class AdlsErrorException
- uid: com.microsoft.azure.management._azure
  parent: com.microsoft.azure.management
  href: com.microsoft.azure.management._azure.yml
  name: Azure
  fullName: com.microsoft.azure.management.Azure
  type: Class
  summary: <p>The entry point for accessing resource management APIs in <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class Azure
- uid: com.microsoft.azure.management.datalake.store._file_systems.concurrentAppendAsync(String,String,byte[],final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Appends to the specified file. This method supports multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append using concurrent append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.concurrentAppend(String,String,byte[],AppendModeType)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: concurrentAppend(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.concurrentAppend(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode)
  type: Method
  summary: >-
    <p>Appends to the specified file. This method supports multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > concurrentAppend(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append using concurrent append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: appendMode
      type: com.microsoft.azure.management.datalake.store.models._append_mode_type
      description: '<p>Indicates the concurrent append call should create the file if it doesn''t exist or just open the existing file for append. Possible values include: ''autocreate'' </p>'
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store.models._append_mode_type
  parent: com.microsoft.azure.management.datalake.store.models
  href: com.microsoft.azure.management.datalake.store.models._append_mode_type.yml
  name: AppendModeType
  fullName: com.microsoft.azure.management.datalake.store.models.AppendModeType
  type: Enum
  summary: <p>Defines values for <xref href="com.microsoft.azure.management.datalake.store.models._append_mode_type" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public enum AppendModeType
- uid: com.microsoft.azure.management.datalake.store._file_systems.concurrentAppendAsync(String,String,byte[],AppendModeType,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Appends to the specified file. This method supports multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append using concurrent append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: appendMode
      type: com.microsoft.azure.management.datalake.store.models._append_mode_type
      description: '<p>Indicates the concurrent append call should create the file if it doesn''t exist or just open the existing file for append. Possible values include: ''autocreate'' </p>'
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.concurrentAppendAsync(String,String,byte[],AppendModeType)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.FileSystems.concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode)
  type: Method
  summary: >-
    <p>Appends to the specified file. This method supports multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > concurrentAppendAsync(String accountName, String filePath, byte[] streamContents, AppendModeType appendMode)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append using concurrent append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: appendMode
      type: com.microsoft.azure.management.datalake.store.models._append_mode_type
      description: '<p>Indicates the concurrent append call should create the file if it doesn''t exist or just open the existing file for append. Possible values include: ''autocreate'' </p>'
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.checkAccess(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: checkAccess(String accountName, String path)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.checkAccess(String accountName, String path)
  type: Method
  summary: >-
    <p>Checks if the specified access is available at the given path.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > checkAccess(String accountName, String path)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to check access. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.checkAccessAsync(String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: checkAccessAsync(String accountName, String path, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.checkAccessAsync(String accountName, String path, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Checks if the specified access is available at the given path.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > checkAccessAsync(String accountName, String path, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to check access. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.checkAccess(String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: checkAccess(String accountName, String path, String fsaction)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.checkAccess(String accountName, String path, String fsaction)
  type: Method
  summary: >-
    <p>Checks if the specified access is available at the given path.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > checkAccess(String accountName, String path, String fsaction)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to check access. </p>
    - id: fsaction
      type: "26831127"
      description: <p>File system operation read/write/execute in string form, matching regex pattern '[rwx-]{3}' </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.checkAccessAsync(String,String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: checkAccessAsync(String accountName, String path, String fsaction, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.checkAccessAsync(String accountName, String path, String fsaction, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Checks if the specified access is available at the given path.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > checkAccessAsync(String accountName, String path, String fsaction, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to check access. </p>
    - id: fsaction
      type: "26831127"
      description: <p>File system operation read/write/execute in string form, matching regex pattern '[rwx-]{3}' </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.checkAccessAsync(String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: checkAccessAsync(String accountName, String path, String fsaction)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.FileSystems.checkAccessAsync(String accountName, String path, String fsaction)
  type: Method
  summary: >-
    <p>Checks if the specified access is available at the given path.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > checkAccessAsync(String accountName, String path, String fsaction)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to check access. </p>
    - id: fsaction
      type: "26831127"
      description: <p>File system operation read/write/execute in string form, matching regex pattern '[rwx-]{3}' </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store.models._file_operation_result
  parent: com.microsoft.azure.management.datalake.store.models
  href: com.microsoft.azure.management.datalake.store.models._file_operation_result.yml
  name: FileOperationResult
  fullName: com.microsoft.azure.management.datalake.store.models.FileOperationResult
  type: Class
  summary: <p>The result of the request or operation. </p>
  syntax:
    content: public class FileOperationResult
- uid: com.microsoft.azure.management.datalake.store._file_systems.mkdirs(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: mkdirs(String accountName, String path)
  fullName: ServiceResponse<FileOperationResult> com.microsoft.azure.management.datalake.store.FileSystems.mkdirs(String accountName, String path)
  type: Method
  summary: >-
    <p>Creates a directory.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileOperationResult > mkdirs(String accountName, String path)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to create. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the FileOperationResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.mkdirsAsync(String,String,final ServiceCallback< FileOperationResult >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: mkdirsAsync(String accountName, String path, final ServiceCallback< FileOperationResult > serviceCallback)
  fullName: ServiceCall<FileOperationResult> com.microsoft.azure.management.datalake.store.FileSystems.mkdirsAsync(String accountName, String path, final ServiceCallback< FileOperationResult > serviceCallback)
  type: Method
  summary: >-
    <p>Creates a directory.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileOperationResult > mkdirsAsync(String accountName, String path, final ServiceCallback< FileOperationResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to create. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.mkdirsAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: mkdirsAsync(String accountName, String path)
  fullName: Observable<ServiceResponse<FileOperationResult> > com.microsoft.azure.management.datalake.store.FileSystems.mkdirsAsync(String accountName, String path)
  type: Method
  summary: >-
    <p>Creates a directory.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< FileOperationResult > > mkdirsAsync(String accountName, String path)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: path
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to create. </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_operation_resultd4c4bc88
      description: <p>the observable to the FileOperationResult object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.concat(String,String,List< String >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: concat(String accountName, String destinationPath, List< String > sources)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.concat(String accountName, String destinationPath, List< String > sources)
  type: Method
  summary: >-
    <p>Concatenates the list of source files into the destination file, removing all source files upon success.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > concat(String accountName, String destinationPath, List< String > sources)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: destinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: sources
      type: f35af49b
      description: <p>A list of comma seperated Data Lake Store paths (starting with '/') of the files to concatenate, in the order in which they should be concatenated. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.concatAsync(String,String,List< String >,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: concatAsync(String accountName, String destinationPath, List< String > sources, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.concatAsync(String accountName, String destinationPath, List< String > sources, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Concatenates the list of source files into the destination file, removing all source files upon success.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > concatAsync(String accountName, String destinationPath, List< String > sources, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: destinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: sources
      type: f35af49b
      description: <p>A list of comma seperated Data Lake Store paths (starting with '/') of the files to concatenate, in the order in which they should be concatenated. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.concatAsync(String,String,List< String >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: concatAsync(String accountName, String destinationPath, List< String > sources)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.FileSystems.concatAsync(String accountName, String destinationPath, List< String > sources)
  type: Method
  summary: >-
    <p>Concatenates the list of source files into the destination file, removing all source files upon success.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > concatAsync(String accountName, String destinationPath, List< String > sources)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: destinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: sources
      type: f35af49b
      description: <p>A list of comma seperated Data Lake Store paths (starting with '/') of the files to concatenate, in the order in which they should be concatenated. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.msConcat(String,String,byte[])
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: msConcat(String accountName, String msConcatDestinationPath, byte[] streamContents)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.msConcat(String accountName, String msConcatDestinationPath, byte[] streamContents)
  type: Method
  summary: >-
    <p>Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > msConcat(String accountName, String msConcatDestinationPath, byte[] streamContents)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: msConcatDestinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: streamContents
      type: bc819c2f
      description: '<p>A list of Data Lake Store paths (starting with ''/'') of the source files. Must be in the format: sources=&lt;comma separated list&gt; </p>'
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.msConcatAsync(String,String,byte[],final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: msConcatDestinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: streamContents
      type: bc819c2f
      description: '<p>A list of Data Lake Store paths (starting with ''/'') of the source files. Must be in the format: sources=&lt;comma separated list&gt; </p>'
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.msConcat(String,String,byte[],Boolean)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: msConcat(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.msConcat(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory)
  type: Method
  summary: >-
    <p>Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > msConcat(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: msConcatDestinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: streamContents
      type: bc819c2f
      description: '<p>A list of Data Lake Store paths (starting with ''/'') of the source files. Must be in the format: sources=&lt;comma separated list&gt; </p>'
    - id: deleteSourceDirectory
      type: 866c2227
      description: '<p>Indicates that as an optimization instead of deleting each individual source stream, delete the source stream folder if all streams are in the same folder instead. This results in a substantial performance improvement when the only streams in the folder are part of the concatenation operation. WARNING: This includes the deletion of any other files that are not source files. Only set this to true when source files are the only files in the source directory. </p>'
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.msConcatAsync(String,String,byte[],Boolean,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: msConcatDestinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: streamContents
      type: bc819c2f
      description: '<p>A list of Data Lake Store paths (starting with ''/'') of the source files. Must be in the format: sources=&lt;comma separated list&gt; </p>'
    - id: deleteSourceDirectory
      type: 866c2227
      description: '<p>Indicates that as an optimization instead of deleting each individual source stream, delete the source stream folder if all streams are in the same folder instead. This results in a substantial performance improvement when the only streams in the folder are part of the concatenation operation. WARNING: This includes the deletion of any other files that are not source files. Only set this to true when source files are the only files in the source directory. </p>'
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.msConcatAsync(String,String,byte[],Boolean)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.FileSystems.msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory)
  type: Method
  summary: >-
    <p>Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > msConcatAsync(String accountName, String msConcatDestinationPath, byte[] streamContents, Boolean deleteSourceDirectory)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: msConcatDestinationPath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the destination file resulting from the concatenation. </p>
    - id: streamContents
      type: bc819c2f
      description: '<p>A list of Data Lake Store paths (starting with ''/'') of the source files. Must be in the format: sources=&lt;comma separated list&gt; </p>'
    - id: deleteSourceDirectory
      type: 866c2227
      description: '<p>Indicates that as an optimization instead of deleting each individual source stream, delete the source stream folder if all streams are in the same folder instead. This results in a substantial performance improvement when the only streams in the folder are part of the concatenation operation. WARNING: This includes the deletion of any other files that are not source files. Only set this to true when source files are the only files in the source directory. </p>'
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store.models._file_statuses_result
  parent: com.microsoft.azure.management.datalake.store.models
  href: com.microsoft.azure.management.datalake.store.models._file_statuses_result.yml
  name: FileStatusesResult
  fullName: com.microsoft.azure.management.datalake.store.models.FileStatusesResult
  type: Class
  summary: <p>Data Lake Store filesystem file status list information response. </p>
  syntax:
    content: public class FileStatusesResult
- uid: com.microsoft.azure.management.datalake.store._file_systems.listFileStatus(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: listFileStatus(String accountName, String listFilePath)
  fullName: ServiceResponse<FileStatusesResult> com.microsoft.azure.management.datalake.store.FileSystems.listFileStatus(String accountName, String listFilePath)
  type: Method
  summary: >-
    <p>Get the list of file status objects specified by the file path, with optional pagination parameters.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileStatusesResult > listFileStatus(String accountName, String listFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: listFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to list. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
      description: <p>the FileStatusesResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.listFileStatusAsync(String,String,final ServiceCallback< FileStatusesResult >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: listFileStatusAsync(String accountName, String listFilePath, final ServiceCallback< FileStatusesResult > serviceCallback)
  fullName: ServiceCall<FileStatusesResult> com.microsoft.azure.management.datalake.store.FileSystems.listFileStatusAsync(String accountName, String listFilePath, final ServiceCallback< FileStatusesResult > serviceCallback)
  type: Method
  summary: >-
    <p>Get the list of file status objects specified by the file path, with optional pagination parameters.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileStatusesResult > listFileStatusAsync(String accountName, String listFilePath, final ServiceCallback< FileStatusesResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: listFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to list. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.listFileStatus(String,String,Integer,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: listFileStatus(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore)
  fullName: ServiceResponse<FileStatusesResult> com.microsoft.azure.management.datalake.store.FileSystems.listFileStatus(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore)
  type: Method
  summary: >-
    <p>Get the list of file status objects specified by the file path, with optional pagination parameters.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileStatusesResult > listFileStatus(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: listFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to list. </p>
    - id: listSize
      type: 08effaa0
      description: <p>Gets or sets the number of items to return. Optional. </p>
    - id: listAfter
      type: "26831127"
      description: <p>Gets or sets the item or lexographical index after which to begin returning results. For example, a file list of 'a','b','d' and listAfter='b' will return 'd', and a listAfter='c' will also return 'd'. Optional. </p>
    - id: listBefore
      type: "26831127"
      description: <p>Gets or sets the item or lexographical index before which to begin returning results. For example, a file list of 'a','b','d' and listBefore='d' will return 'a','b', and a listBefore='c' will also return 'a','b'. Optional. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
      description: <p>the FileStatusesResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.listFileStatusAsync(String,String,Integer,String,String,final ServiceCallback< FileStatusesResult >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: listFileStatusAsync(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore, final ServiceCallback< FileStatusesResult > serviceCallback)
  fullName: ServiceCall<FileStatusesResult> com.microsoft.azure.management.datalake.store.FileSystems.listFileStatusAsync(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore, final ServiceCallback< FileStatusesResult > serviceCallback)
  type: Method
  summary: >-
    <p>Get the list of file status objects specified by the file path, with optional pagination parameters.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileStatusesResult > listFileStatusAsync(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore, final ServiceCallback< FileStatusesResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: listFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to list. </p>
    - id: listSize
      type: 08effaa0
      description: <p>Gets or sets the number of items to return. Optional. </p>
    - id: listAfter
      type: "26831127"
      description: <p>Gets or sets the item or lexographical index after which to begin returning results. For example, a file list of 'a','b','d' and listAfter='b' will return 'd', and a listAfter='c' will also return 'd'. Optional. </p>
    - id: listBefore
      type: "26831127"
      description: <p>Gets or sets the item or lexographical index before which to begin returning results. For example, a file list of 'a','b','d' and listBefore='d' will return 'a','b', and a listBefore='c' will also return 'a','b'. Optional. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_statuses_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.listFileStatusAsync(String,String,Integer,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: listFileStatusAsync(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore)
  fullName: Observable<ServiceResponse<FileStatusesResult> > com.microsoft.azure.management.datalake.store.FileSystems.listFileStatusAsync(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore)
  type: Method
  summary: >-
    <p>Get the list of file status objects specified by the file path, with optional pagination parameters.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< FileStatusesResult > > listFileStatusAsync(String accountName, String listFilePath, Integer listSize, String listAfter, String listBefore)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: listFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the directory to list. </p>
    - id: listSize
      type: 08effaa0
      description: <p>Gets or sets the number of items to return. Optional. </p>
    - id: listAfter
      type: "26831127"
      description: <p>Gets or sets the item or lexographical index after which to begin returning results. For example, a file list of 'a','b','d' and listAfter='b' will return 'd', and a listAfter='c' will also return 'd'. Optional. </p>
    - id: listBefore
      type: "26831127"
      description: <p>Gets or sets the item or lexographical index before which to begin returning results. For example, a file list of 'a','b','d' and listBefore='d' will return 'a','b', and a listBefore='c' will also return 'a','b'. Optional. </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_statuses_resultd4c4bc88
      description: <p>the observable to the FileStatusesResult object </p>
- uid: com.microsoft.azure.management.datalake.store.models._content_summary_result
  parent: com.microsoft.azure.management.datalake.store.models
  href: com.microsoft.azure.management.datalake.store.models._content_summary_result.yml
  name: ContentSummaryResult
  fullName: com.microsoft.azure.management.datalake.store.models.ContentSummaryResult
  type: Class
  summary: <p>Data Lake Store filesystem content summary information response. </p>
  syntax:
    content: public class ContentSummaryResult
- uid: com.microsoft.azure.management.datalake.store._file_systems.getContentSummary(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: getContentSummary(String accountName, String getContentSummaryFilePath)
  fullName: ServiceResponse<ContentSummaryResult> com.microsoft.azure.management.datalake.store.FileSystems.getContentSummary(String accountName, String getContentSummaryFilePath)
  type: Method
  summary: >-
    <p>Gets the file content summary object specified by the file path.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< ContentSummaryResult > getContentSummary(String accountName, String getContentSummaryFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: getContentSummaryFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file for which to retrieve the summary. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._content_summary_result9ec3e006
      description: <p>the ContentSummaryResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.getContentSummaryAsync(String,String,final ServiceCallback< ContentSummaryResult >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: getContentSummaryAsync(String accountName, String getContentSummaryFilePath, final ServiceCallback< ContentSummaryResult > serviceCallback)
  fullName: ServiceCall<ContentSummaryResult> com.microsoft.azure.management.datalake.store.FileSystems.getContentSummaryAsync(String accountName, String getContentSummaryFilePath, final ServiceCallback< ContentSummaryResult > serviceCallback)
  type: Method
  summary: >-
    <p>Gets the file content summary object specified by the file path.</p>

    <p></p>
  syntax:
    content: public ServiceCall< ContentSummaryResult > getContentSummaryAsync(String accountName, String getContentSummaryFilePath, final ServiceCallback< ContentSummaryResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: getContentSummaryFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file for which to retrieve the summary. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._content_summary_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._content_summary_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.getContentSummaryAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: getContentSummaryAsync(String accountName, String getContentSummaryFilePath)
  fullName: Observable<ServiceResponse<ContentSummaryResult> > com.microsoft.azure.management.datalake.store.FileSystems.getContentSummaryAsync(String accountName, String getContentSummaryFilePath)
  type: Method
  summary: >-
    <p>Gets the file content summary object specified by the file path.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< ContentSummaryResult > > getContentSummaryAsync(String accountName, String getContentSummaryFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: getContentSummaryFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file for which to retrieve the summary. </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._content_summary_resultd4c4bc88
      description: <p>the observable to the ContentSummaryResult object </p>
- uid: com.microsoft.azure.management.datalake.store.models._file_status_result
  parent: com.microsoft.azure.management.datalake.store.models
  href: com.microsoft.azure.management.datalake.store.models._file_status_result.yml
  name: FileStatusResult
  fullName: com.microsoft.azure.management.datalake.store.models.FileStatusResult
  type: Class
  summary: <p>Data Lake Store filesystem file status information response. </p>
  syntax:
    content: public class FileStatusResult
- uid: com.microsoft.azure.management.datalake.store._file_systems.getFileStatus(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: getFileStatus(String accountName, String getFilePath)
  fullName: ServiceResponse<FileStatusResult> com.microsoft.azure.management.datalake.store.FileSystems.getFileStatus(String accountName, String getFilePath)
  type: Method
  summary: >-
    <p>Get the file status object specified by the file path.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileStatusResult > getFileStatus(String accountName, String getFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: getFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to retrieve the status. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_status_result9ec3e006
      description: <p>the FileStatusResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.getFileStatusAsync(String,String,final ServiceCallback< FileStatusResult >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: getFileStatusAsync(String accountName, String getFilePath, final ServiceCallback< FileStatusResult > serviceCallback)
  fullName: ServiceCall<FileStatusResult> com.microsoft.azure.management.datalake.store.FileSystems.getFileStatusAsync(String accountName, String getFilePath, final ServiceCallback< FileStatusResult > serviceCallback)
  type: Method
  summary: >-
    <p>Get the file status object specified by the file path.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileStatusResult > getFileStatusAsync(String accountName, String getFilePath, final ServiceCallback< FileStatusResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: getFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to retrieve the status. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_status_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_status_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.getFileStatusAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: getFileStatusAsync(String accountName, String getFilePath)
  fullName: Observable<ServiceResponse<FileStatusResult> > com.microsoft.azure.management.datalake.store.FileSystems.getFileStatusAsync(String accountName, String getFilePath)
  type: Method
  summary: >-
    <p>Get the file status object specified by the file path.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< FileStatusResult > > getFileStatusAsync(String accountName, String getFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: getFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to retrieve the status. </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_status_resultd4c4bc88
      description: <p>the observable to the FileStatusResult object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.append(String,String,byte[])
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: append(String accountName, String directFilePath, byte[] streamContents)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.append(String accountName, String directFilePath, byte[] streamContents)
  type: Method
  summary: >-
    <p>Appends to the specified file. This method does not support multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option. Use the ConcurrentAppend option if you would like support for concurrent appends.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > append(String accountName, String directFilePath, byte[] streamContents)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.appendAsync(String,String,byte[],final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: appendAsync(String accountName, String directFilePath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.appendAsync(String accountName, String directFilePath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Appends to the specified file. This method does not support multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option. Use the ConcurrentAppend option if you would like support for concurrent appends.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > appendAsync(String accountName, String directFilePath, byte[] streamContents, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.append(String,String,byte[],Long)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: append(String accountName, String directFilePath, byte[] streamContents, Long offset)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.append(String accountName, String directFilePath, byte[] streamContents, Long offset)
  type: Method
  summary: >-
    <p>Appends to the specified file. This method does not support multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option. Use the ConcurrentAppend option if you would like support for concurrent appends.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > append(String accountName, String directFilePath, byte[] streamContents, Long offset)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: offset
      type: 34f09483
      description: <p>The optional offset in the stream to begin the append operation. Default is to append at the end of the stream. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.appendAsync(String,String,byte[],Long,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: appendAsync(String accountName, String directFilePath, byte[] streamContents, Long offset, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.appendAsync(String accountName, String directFilePath, byte[] streamContents, Long offset, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Appends to the specified file. This method does not support multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option. Use the ConcurrentAppend option if you would like support for concurrent appends.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > appendAsync(String accountName, String directFilePath, byte[] streamContents, Long offset, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: offset
      type: 34f09483
      description: <p>The optional offset in the stream to begin the append operation. Default is to append at the end of the stream. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.appendAsync(String,String,byte[],Long)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: appendAsync(String accountName, String directFilePath, byte[] streamContents, Long offset)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.FileSystems.appendAsync(String accountName, String directFilePath, byte[] streamContents, Long offset)
  type: Method
  summary: >-
    <p>Appends to the specified file. This method does not support multiple concurrent appends to the file. NOTE: Concurrent append and normal (serial) append CANNOT be used interchangeably. Once a file has been appended to using either append option, it can only be appended to using that append option. Use the ConcurrentAppend option if you would like support for concurrent appends.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > appendAsync(String accountName, String directFilePath, byte[] streamContents, Long offset)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to which to append. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when appending to the file. </p>
    - id: offset
      type: 34f09483
      description: <p>The optional offset in the stream to begin the append operation. Default is to append at the end of the stream. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.create(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: create(String accountName, String directFilePath)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.create(String accountName, String directFilePath)
  type: Method
  summary: >-
    <p>Creates a file with optionally specified content.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > create(String accountName, String directFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to create. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.createAsync(String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: createAsync(String accountName, String directFilePath, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.createAsync(String accountName, String directFilePath, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Creates a file with optionally specified content.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > createAsync(String accountName, String directFilePath, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to create. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.create(String,String,byte[],Boolean)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: create(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.create(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite)
  type: Method
  summary: >-
    <p>Creates a file with optionally specified content.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > create(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to create. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when creating the file. This parameter is optional, resulting in an empty file if not specified. </p>
    - id: overwrite
      type: 866c2227
      description: <p>The indication of if the file should be overwritten. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.createAsync(String,String,byte[],Boolean,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: createAsync(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.createAsync(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Creates a file with optionally specified content.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > createAsync(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to create. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when creating the file. This parameter is optional, resulting in an empty file if not specified. </p>
    - id: overwrite
      type: 866c2227
      description: <p>The indication of if the file should be overwritten. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.createAsync(String,String,byte[],Boolean)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: createAsync(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.FileSystems.createAsync(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite)
  type: Method
  summary: >-
    <p>Creates a file with optionally specified content.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > createAsync(String accountName, String directFilePath, byte[] streamContents, Boolean overwrite)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to create. </p>
    - id: streamContents
      type: bc819c2f
      description: <p>The file contents to include when creating the file. This parameter is optional, resulting in an empty file if not specified. </p>
    - id: overwrite
      type: 866c2227
      description: <p>The indication of if the file should be overwritten. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.open(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: open(String accountName, String directFilePath)
  fullName: ServiceResponse<InputStream> com.microsoft.azure.management.datalake.store.FileSystems.open(String accountName, String directFilePath)
  type: Method
  summary: >-
    <p>Opens and reads from the specified file.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< InputStream > open(String accountName, String directFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to open. </p>
    return:
      type: 272c41a6
      description: <p>the InputStream object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.openAsync(String,String,final ServiceCallback< InputStream >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: openAsync(String accountName, String directFilePath, final ServiceCallback< InputStream > serviceCallback)
  fullName: ServiceCall<InputStream> com.microsoft.azure.management.datalake.store.FileSystems.openAsync(String accountName, String directFilePath, final ServiceCallback< InputStream > serviceCallback)
  type: Method
  summary: >-
    <p>Opens and reads from the specified file.</p>

    <p></p>
  syntax:
    content: public ServiceCall< InputStream > openAsync(String accountName, String directFilePath, final ServiceCallback< InputStream > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to open. </p>
    - id: serviceCallback
      type: 647f35a4
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 47bfbe0f
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.open(String,String,Long,Long)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: open(String accountName, String directFilePath, Long length, Long offset)
  fullName: ServiceResponse<InputStream> com.microsoft.azure.management.datalake.store.FileSystems.open(String accountName, String directFilePath, Long length, Long offset)
  type: Method
  summary: >-
    <p>Opens and reads from the specified file.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< InputStream > open(String accountName, String directFilePath, Long length, Long offset)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to open. </p>
    - id: length
      type: 34f09483
      description: <p>the Long value </p>
    - id: offset
      type: 34f09483
      description: <p>the Long value </p>
    return:
      type: 272c41a6
      description: <p>the InputStream object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.openAsync(String,String,Long,Long,final ServiceCallback< InputStream >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: openAsync(String accountName, String directFilePath, Long length, Long offset, final ServiceCallback< InputStream > serviceCallback)
  fullName: ServiceCall<InputStream> com.microsoft.azure.management.datalake.store.FileSystems.openAsync(String accountName, String directFilePath, Long length, Long offset, final ServiceCallback< InputStream > serviceCallback)
  type: Method
  summary: >-
    <p>Opens and reads from the specified file.</p>

    <p></p>
  syntax:
    content: public ServiceCall< InputStream > openAsync(String accountName, String directFilePath, Long length, Long offset, final ServiceCallback< InputStream > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to open. </p>
    - id: length
      type: 34f09483
      description: <p>the Long value </p>
    - id: offset
      type: 34f09483
      description: <p>the Long value </p>
    - id: serviceCallback
      type: 647f35a4
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 47bfbe0f
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.openAsync(String,String,Long,Long)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: openAsync(String accountName, String directFilePath, Long length, Long offset)
  fullName: Observable<ServiceResponse<InputStream> > com.microsoft.azure.management.datalake.store.FileSystems.openAsync(String accountName, String directFilePath, Long length, Long offset)
  type: Method
  summary: >-
    <p>Opens and reads from the specified file.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< InputStream > > openAsync(String accountName, String directFilePath, Long length, Long offset)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: directFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file to open. </p>
    - id: length
      type: 34f09483
      description: <p>the Long value </p>
    - id: offset
      type: 34f09483
      description: <p>the Long value </p>
    return:
      type: 276aebb0
      description: <p>the observable to the InputStream object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.setAcl(String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: setAcl(String accountName, String setAclFilePath, String aclspec)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.setAcl(String accountName, String setAclFilePath, String aclspec)
  type: Method
  summary: >-
    <p>Sets the Access Control List (ACL) for a file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > setAcl(String accountName, String setAclFilePath, String aclspec)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory on which to set the ACL. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL spec included in ACL creation operations in the format '[default:]user|group|other::r|-w|-x|-' </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.setAclAsync(String,String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: setAclAsync(String accountName, String setAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.setAclAsync(String accountName, String setAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Sets the Access Control List (ACL) for a file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > setAclAsync(String accountName, String setAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory on which to set the ACL. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL spec included in ACL creation operations in the format '[default:]user|group|other::r|-w|-x|-' </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.setAclAsync(String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: setAclAsync(String accountName, String setAclFilePath, String aclspec)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.FileSystems.setAclAsync(String accountName, String setAclFilePath, String aclspec)
  type: Method
  summary: >-
    <p>Sets the Access Control List (ACL) for a file or folder.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > setAclAsync(String accountName, String setAclFilePath, String aclspec)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory on which to set the ACL. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL spec included in ACL creation operations in the format '[default:]user|group|other::r|-w|-x|-' </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.modifyAclEntries(String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: modifyAclEntries(String accountName, String modifyAclFilePath, String aclspec)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.modifyAclEntries(String accountName, String modifyAclFilePath, String aclspec)
  type: Method
  summary: >-
    <p>Modifies existing Access Control List (ACL) entries on a file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > modifyAclEntries(String accountName, String modifyAclFilePath, String aclspec)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: modifyAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory with the ACL being modified. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL specification included in ACL modification operations in the format '[default:]user|group|other::r|-w|-x|-' </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.modifyAclEntriesAsync(String,String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: modifyAclEntriesAsync(String accountName, String modifyAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.modifyAclEntriesAsync(String accountName, String modifyAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Modifies existing Access Control List (ACL) entries on a file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > modifyAclEntriesAsync(String accountName, String modifyAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: modifyAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory with the ACL being modified. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL specification included in ACL modification operations in the format '[default:]user|group|other::r|-w|-x|-' </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.modifyAclEntriesAsync(String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: modifyAclEntriesAsync(String accountName, String modifyAclFilePath, String aclspec)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.FileSystems.modifyAclEntriesAsync(String accountName, String modifyAclFilePath, String aclspec)
  type: Method
  summary: >-
    <p>Modifies existing Access Control List (ACL) entries on a file or folder.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > modifyAclEntriesAsync(String accountName, String modifyAclFilePath, String aclspec)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: modifyAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory with the ACL being modified. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL specification included in ACL modification operations in the format '[default:]user|group|other::r|-w|-x|-' </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.removeAclEntries(String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: removeAclEntries(String accountName, String removeAclFilePath, String aclspec)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.removeAclEntries(String accountName, String removeAclFilePath, String aclspec)
  type: Method
  summary: >-
    <p>Removes existing Access Control List (ACL) entries for a file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > removeAclEntries(String accountName, String removeAclFilePath, String aclspec)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: removeAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL spec included in ACL removal operations in the format '[default:]user|group|other' </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.removeAclEntriesAsync(String,String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: removeAclEntriesAsync(String accountName, String removeAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.removeAclEntriesAsync(String accountName, String removeAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Removes existing Access Control List (ACL) entries for a file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > removeAclEntriesAsync(String accountName, String removeAclFilePath, String aclspec, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: removeAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL spec included in ACL removal operations in the format '[default:]user|group|other' </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.removeAclEntriesAsync(String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: removeAclEntriesAsync(String accountName, String removeAclFilePath, String aclspec)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.FileSystems.removeAclEntriesAsync(String accountName, String removeAclFilePath, String aclspec)
  type: Method
  summary: >-
    <p>Removes existing Access Control List (ACL) entries for a file or folder.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > removeAclEntriesAsync(String accountName, String removeAclFilePath, String aclspec)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: removeAclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory with the ACL being removed. </p>
    - id: aclspec
      type: "26831127"
      description: <p>The ACL spec included in ACL removal operations in the format '[default:]user|group|other' </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store.models._acl_status_result
  parent: com.microsoft.azure.management.datalake.store.models
  href: com.microsoft.azure.management.datalake.store.models._acl_status_result.yml
  name: AclStatusResult
  fullName: com.microsoft.azure.management.datalake.store.models.AclStatusResult
  type: Class
  summary: <p>Data Lake Store file or directory Access Control List information. </p>
  syntax:
    content: public class AclStatusResult
- uid: com.microsoft.azure.management.datalake.store._file_systems.getAclStatus(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: getAclStatus(String accountName, String aclFilePath)
  fullName: ServiceResponse<AclStatusResult> com.microsoft.azure.management.datalake.store.FileSystems.getAclStatus(String accountName, String aclFilePath)
  type: Method
  summary: >-
    <p>Gets Access Control List (ACL) entries for the specified file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< AclStatusResult > getAclStatus(String accountName, String aclFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: aclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to get the ACL. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._acl_status_result9ec3e006
      description: <p>the AclStatusResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.getAclStatusAsync(String,String,final ServiceCallback< AclStatusResult >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: getAclStatusAsync(String accountName, String aclFilePath, final ServiceCallback< AclStatusResult > serviceCallback)
  fullName: ServiceCall<AclStatusResult> com.microsoft.azure.management.datalake.store.FileSystems.getAclStatusAsync(String accountName, String aclFilePath, final ServiceCallback< AclStatusResult > serviceCallback)
  type: Method
  summary: >-
    <p>Gets Access Control List (ACL) entries for the specified file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceCall< AclStatusResult > getAclStatusAsync(String accountName, String aclFilePath, final ServiceCallback< AclStatusResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: aclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to get the ACL. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._acl_status_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._acl_status_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.getAclStatusAsync(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: getAclStatusAsync(String accountName, String aclFilePath)
  fullName: Observable<ServiceResponse<AclStatusResult> > com.microsoft.azure.management.datalake.store.FileSystems.getAclStatusAsync(String accountName, String aclFilePath)
  type: Method
  summary: >-
    <p>Gets Access Control List (ACL) entries for the specified file or directory.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< AclStatusResult > > getAclStatusAsync(String accountName, String aclFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: aclFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to get the ACL. </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._acl_status_resultd4c4bc88
      description: <p>the observable to the AclStatusResult object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.delete(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: delete(String accountName, String filePath)
  fullName: ServiceResponse<FileOperationResult> com.microsoft.azure.management.datalake.store.FileSystems.delete(String accountName, String filePath)
  type: Method
  summary: >-
    <p>Deletes the requested file or directory, optionally recursively.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileOperationResult > delete(String accountName, String filePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to delete. </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the FileOperationResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.deleteAsync(String,String,final ServiceCallback< FileOperationResult >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: deleteAsync(String accountName, String filePath, final ServiceCallback< FileOperationResult > serviceCallback)
  fullName: ServiceCall<FileOperationResult> com.microsoft.azure.management.datalake.store.FileSystems.deleteAsync(String accountName, String filePath, final ServiceCallback< FileOperationResult > serviceCallback)
  type: Method
  summary: >-
    <p>Deletes the requested file or directory, optionally recursively.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileOperationResult > deleteAsync(String accountName, String filePath, final ServiceCallback< FileOperationResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to delete. </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.delete(String,String,Boolean)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: delete(String accountName, String filePath, Boolean recursive)
  fullName: ServiceResponse<FileOperationResult> com.microsoft.azure.management.datalake.store.FileSystems.delete(String accountName, String filePath, Boolean recursive)
  type: Method
  summary: >-
    <p>Deletes the requested file or directory, optionally recursively.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileOperationResult > delete(String accountName, String filePath, Boolean recursive)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>The optional switch indicating if the delete should be recursive </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the FileOperationResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.deleteAsync(String,String,Boolean,final ServiceCallback< FileOperationResult >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: deleteAsync(String accountName, String filePath, Boolean recursive, final ServiceCallback< FileOperationResult > serviceCallback)
  fullName: ServiceCall<FileOperationResult> com.microsoft.azure.management.datalake.store.FileSystems.deleteAsync(String accountName, String filePath, Boolean recursive, final ServiceCallback< FileOperationResult > serviceCallback)
  type: Method
  summary: >-
    <p>Deletes the requested file or directory, optionally recursively.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileOperationResult > deleteAsync(String accountName, String filePath, Boolean recursive, final ServiceCallback< FileOperationResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>The optional switch indicating if the delete should be recursive </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.deleteAsync(String,String,Boolean)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: deleteAsync(String accountName, String filePath, Boolean recursive)
  fullName: Observable<ServiceResponse<FileOperationResult> > com.microsoft.azure.management.datalake.store.FileSystems.deleteAsync(String accountName, String filePath, Boolean recursive)
  type: Method
  summary: >-
    <p>Deletes the requested file or directory, optionally recursively.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< FileOperationResult > > deleteAsync(String accountName, String filePath, Boolean recursive)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: filePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>The optional switch indicating if the delete should be recursive </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_operation_resultd4c4bc88
      description: <p>the observable to the FileOperationResult object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.rename(String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: rename(String accountName, String renameFilePath, String destination)
  fullName: ServiceResponse<FileOperationResult> com.microsoft.azure.management.datalake.store.FileSystems.rename(String accountName, String renameFilePath, String destination)
  type: Method
  summary: >-
    <p>Rename a file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< FileOperationResult > rename(String accountName, String renameFilePath, String destination)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: renameFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to move/rename. </p>
    - id: destination
      type: "26831127"
      description: <p>The path to move/rename the file or folder to </p>
    return:
      type: 115bb2cccom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the FileOperationResult object wrapped in <ref refid="" kindref="compound">ServiceResponse</ref> if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.renameAsync(String,String,String,final ServiceCallback< FileOperationResult >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: renameAsync(String accountName, String renameFilePath, String destination, final ServiceCallback< FileOperationResult > serviceCallback)
  fullName: ServiceCall<FileOperationResult> com.microsoft.azure.management.datalake.store.FileSystems.renameAsync(String accountName, String renameFilePath, String destination, final ServiceCallback< FileOperationResult > serviceCallback)
  type: Method
  summary: >-
    <p>Rename a file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceCall< FileOperationResult > renameAsync(String accountName, String renameFilePath, String destination, final ServiceCallback< FileOperationResult > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: renameFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to move/rename. </p>
    - id: destination
      type: "26831127"
      description: <p>The path to move/rename the file or folder to </p>
    - id: serviceCallback
      type: 97d8d0cfcom.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 9e4c5505com.microsoft.azure.management.datalake.store.models._file_operation_result9ec3e006
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.renameAsync(String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: renameAsync(String accountName, String renameFilePath, String destination)
  fullName: Observable<ServiceResponse<FileOperationResult> > com.microsoft.azure.management.datalake.store.FileSystems.renameAsync(String accountName, String renameFilePath, String destination)
  type: Method
  summary: >-
    <p>Rename a file or directory.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< FileOperationResult > > renameAsync(String accountName, String renameFilePath, String destination)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: renameFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory to move/rename. </p>
    - id: destination
      type: "26831127"
      description: <p>The path to move/rename the file or folder to </p>
    return:
      type: cbaf8b21com.microsoft.azure.management.datalake.store.models._file_operation_resultd4c4bc88
      description: <p>the observable to the FileOperationResult object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.setOwner(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: setOwner(String accountName, String setOwnerFilePath)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.setOwner(String accountName, String setOwnerFilePath)
  type: Method
  summary: >-
    <p>Sets the owner of a file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > setOwner(String accountName, String setOwnerFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setOwnerFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the owner. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.setOwnerAsync(String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: setOwnerAsync(String accountName, String setOwnerFilePath, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.setOwnerAsync(String accountName, String setOwnerFilePath, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Sets the owner of a file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > setOwnerAsync(String accountName, String setOwnerFilePath, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setOwnerFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the owner. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.setOwner(String,String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: setOwner(String accountName, String setOwnerFilePath, String owner, String group)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.setOwner(String accountName, String setOwnerFilePath, String owner, String group)
  type: Method
  summary: >-
    <p>Sets the owner of a file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > setOwner(String accountName, String setOwnerFilePath, String owner, String group)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setOwnerFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the owner. </p>
    - id: owner
      type: "26831127"
      description: <p>The AAD Object ID of the user owner of the file or directory. If empty, the property will remain unchanged. </p>
    - id: group
      type: "26831127"
      description: <p>The AAD Object ID of the group owner of the file or directory. If empty, the property will remain unchanged. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.setOwnerAsync(String,String,String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: setOwnerAsync(String accountName, String setOwnerFilePath, String owner, String group, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.setOwnerAsync(String accountName, String setOwnerFilePath, String owner, String group, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Sets the owner of a file or directory.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > setOwnerAsync(String accountName, String setOwnerFilePath, String owner, String group, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setOwnerFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the owner. </p>
    - id: owner
      type: "26831127"
      description: <p>The AAD Object ID of the user owner of the file or directory. If empty, the property will remain unchanged. </p>
    - id: group
      type: "26831127"
      description: <p>The AAD Object ID of the group owner of the file or directory. If empty, the property will remain unchanged. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.setOwnerAsync(String,String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: setOwnerAsync(String accountName, String setOwnerFilePath, String owner, String group)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.FileSystems.setOwnerAsync(String accountName, String setOwnerFilePath, String owner, String group)
  type: Method
  summary: >-
    <p>Sets the owner of a file or directory.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > setOwnerAsync(String accountName, String setOwnerFilePath, String owner, String group)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setOwnerFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the owner. </p>
    - id: owner
      type: "26831127"
      description: <p>The AAD Object ID of the user owner of the file or directory. If empty, the property will remain unchanged. </p>
    - id: group
      type: "26831127"
      description: <p>The AAD Object ID of the group owner of the file or directory. If empty, the property will remain unchanged. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.setPermission(String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: setPermission(String accountName, String setPermissionFilePath)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.setPermission(String accountName, String setPermissionFilePath)
  type: Method
  summary: >-
    <p>Sets the permission of the file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > setPermission(String accountName, String setPermissionFilePath)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setPermissionFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the permission. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.setPermissionAsync(String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: setPermissionAsync(String accountName, String setPermissionFilePath, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.setPermissionAsync(String accountName, String setPermissionFilePath, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Sets the permission of the file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > setPermissionAsync(String accountName, String setPermissionFilePath, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setPermissionFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the permission. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.setPermission(String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: setPermission(String accountName, String setPermissionFilePath, String permission)
  fullName: ServiceResponse<Void> com.microsoft.azure.management.datalake.store.FileSystems.setPermission(String accountName, String setPermissionFilePath, String permission)
  type: Method
  summary: >-
    <p>Sets the permission of the file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceResponse< Void > setPermission(String accountName, String setPermissionFilePath, String permission)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setPermissionFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the permission. </p>
    - id: permission
      type: "26831127"
      description: <p>A string representation of the permission (i.e 'rwx'). If empty, this property remains unchanged. </p>
    return:
      type: 4379c115
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.setPermissionAsync(String,String,String,final ServiceCallback< Void >)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: setPermissionAsync(String accountName, String setPermissionFilePath, String permission, final ServiceCallback< Void > serviceCallback)
  fullName: ServiceCall<Void> com.microsoft.azure.management.datalake.store.FileSystems.setPermissionAsync(String accountName, String setPermissionFilePath, String permission, final ServiceCallback< Void > serviceCallback)
  type: Method
  summary: >-
    <p>Sets the permission of the file or folder.</p>

    <p></p>
  syntax:
    content: public ServiceCall< Void > setPermissionAsync(String accountName, String setPermissionFilePath, String permission, final ServiceCallback< Void > serviceCallback)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setPermissionFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the permission. </p>
    - id: permission
      type: "26831127"
      description: <p>A string representation of the permission (i.e 'rwx'). If empty, this property remains unchanged. </p>
    - id: serviceCallback
      type: e53fb623
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: "85152549"
      description: <p>the <ref refid="" kindref="compound">ServiceCall</ref> object </p>
- uid: com.microsoft.azure.management.datalake.store._file_systems.setPermissionAsync(String,String,String)
  parent: com.microsoft.azure.management.datalake.store._file_systems
  href: com.microsoft.azure.management.datalake.store._file_systems.yml
  name: setPermissionAsync(String accountName, String setPermissionFilePath, String permission)
  fullName: Observable<ServiceResponse<Void> > com.microsoft.azure.management.datalake.store.FileSystems.setPermissionAsync(String accountName, String setPermissionFilePath, String permission)
  type: Method
  summary: >-
    <p>Sets the permission of the file or folder.</p>

    <p></p>
  syntax:
    content: public Observable< ServiceResponse< Void > > setPermissionAsync(String accountName, String setPermissionFilePath, String permission)
    parameters:
    - id: accountName
      type: "26831127"
      description: <p>The <xref href="com.microsoft.azure.management._azure" data-throw-if-not-resolved="false"></xref> Data Lake Store account to execute filesystem operations on. </p>
    - id: setPermissionFilePath
      type: "26831127"
      description: <p>The Data Lake Store path (starting with '/') of the file or directory for which to set the permission. </p>
    - id: permission
      type: "26831127"
      description: <p>A string representation of the permission (i.e 'rwx'). If empty, this property remains unchanged. </p>
    return:
      type: 450f15bc
      description: <p>the <ref refid="" kindref="compound">ServiceResponse</ref> object if successful. </p>
